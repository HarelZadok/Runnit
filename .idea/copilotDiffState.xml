<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/lib/features/OSApp/OSAppWindow.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/lib/features/OSApp/OSAppWindow.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import { OSApp } from '@/lib/features/OSApp/OSApp';&#10;import { useEffect, useState, useRef } from 'react';&#10;import { useAppDispatch, useAppSelector } from '@/lib/hooks';&#10;import { addOpenApp, removeOpenApp } from '@/lib/features/taskbar/taskbarSlice';&#10;import {&#10;&#9;closeApp, focusApp,&#10;&#9;maximizeApp,&#10;&#9;minimizeApp,&#10;&#9;unmaximizeApp,&#10;&#9;unminimizeApp,&#10;} from '@/lib/features/windowManager/windowManagerSlice';&#10;&#10;export interface AppWindowProps {&#10;&#9;width?: number;&#10;&#9;height?: number;&#10;&#9;x?: number;&#10;&#9;y?: number;&#10;}&#10;&#10;export interface OSAppWindowProps {&#10;&#9;props?: AppWindowProps;&#10;&#9;app: OSApp;&#10;}&#10;&#10;export default function OSAppWindow({ props, app }: OSAppWindowProps) {&#10;&#9;const dispatch = useAppDispatch();&#10;&#10;&#9;const taskbarHeight = useAppSelector(state =&gt; state.settings.taskbarHeight);&#10;&#9;const maximized = useAppSelector(state =&gt; state.windowManager.openApps).find(cApp =&gt; cApp.pid === app.appFile.id)!.isMaximized;&#10;&#9;const minimized = useAppSelector(state =&gt; state.windowManager.openApps).find(cApp =&gt; cApp.pid === app.appFile.id)!.isMinimized;&#10;&#9;const zIndex = useAppSelector(state =&gt; state.windowManager.openApps).find(cApp =&gt; cApp.pid === app.appFile.id)!.zIndex;&#10;&#10;&#9;const [width, setWidth] = useState(props?.width ?? app.defaultWidth);&#10;&#9;const [height, setHeight] = useState(props?.height ?? app.defaultHeight);&#10;&#10;&#9;const [isGrabbing, setIsGrabbing] = useState(false);&#10;&#9;const [position, setPosition] = useState({&#10;&#9;&#9;x: props?.x ?? window.innerWidth / 2 - width / 2,&#10;&#9;&#9;y: props?.y ?? window.innerHeight / 2 - height / 2,&#10;&#9;});&#10;&#9;const prevMouseRef = useRef({ x: 0, y: 0 });&#10;&#10;&#9;useEffect(() =&gt; {&#10;&#9;&#9;dispatch(addOpenApp(app.appFile));&#10;&#10;&#9;&#9;return () =&gt; {&#10;&#9;&#9;&#9;dispatch(removeOpenApp(app.appFile));&#10;&#9;&#9;};&#10;&#9;}, [app.appFile, dispatch]);&#10;&#10;&#9;useEffect(() =&gt; {&#10;&#9;&#9;app.setOnGrab(e =&gt; {&#10;&#9;&#9;&#9;setIsGrabbing(true);&#10;&#9;&#9;&#9;prevMouseRef.current = { x: e.clientX, y: e.clientY };&#10;&#9;&#9;});&#10;&#9;&#9;app.setOnGrabbing(e =&gt; {&#10;&#9;&#9;&#9;const deltaX = e.clientX - prevMouseRef.current.x;&#10;&#9;&#9;&#9;const deltaY = e.clientY - prevMouseRef.current.y;&#10;&#10;&#9;&#9;&#9;setPosition(prev =&gt; ({&#10;&#9;&#9;&#9;&#9;x: prev.x + deltaX,&#10;&#9;&#9;&#9;&#9;y: prev.y + deltaY,&#10;&#9;&#9;&#9;}));&#10;&#9;&#9;&#9;prevMouseRef.current = { x: e.clientX, y: e.clientY };&#10;&#9;&#9;});&#10;&#9;&#9;app.setOnRelease(e =&gt; {&#10;&#9;&#9;&#9;setIsGrabbing(false);&#10;&#9;&#9;});&#10;&#9;&#9;app.setOnMaximize(() =&gt; {&#10;&#9;&#9;&#9;if (!maximized)&#10;&#9;&#9;&#9;&#9;dispatch(maximizeApp(app.appFile.id));&#10;&#9;&#9;&#9;else&#10;&#9;&#9;&#9;&#9;dispatch(unmaximizeApp(app.appFile.id));&#10;&#9;&#9;});&#10;&#9;&#9;app.setOnMinimize(() =&gt; {&#10;&#9;&#9;&#9;if (!minimized)&#10;&#9;&#9;&#9;&#9;dispatch(minimizeApp(app.appFile.id));&#10;&#9;&#9;&#9;else&#10;&#9;&#9;&#9;&#9;dispatch(unminimizeApp(app.appFile.id));&#10;&#9;&#9;});&#10;&#9;&#9;app.setOnClose(() =&gt; {&#10;&#9;&#9;&#9;dispatch(closeApp(app.appFile.id));&#10;&#9;&#9;});&#10;&#9;}, [app, dispatch, maximized, minimized]);&#10;&#10;&#9;return &lt;div&#10;&#9;&#9;className=&quot;absolute flex flex-col rounded-lg overflow-hidden border-[1px] transition-all duration-300&quot;&#10;&#9;&#9;onMouseDown={e =&gt; {&#10;&#9;&#9;&#9;e.stopPropagation();&#10;&#9;&#9;}}&#10;&#9;&#9;onMouseDownCapture={e =&gt; {&#10;&#9;&#9;&#9;dispatch(focusApp(app.appFile.id));&#10;&#9;&#9;}}&#10;&#9;&#9;style={{&#10;&#9;&#9;&#9;left: minimized ? window.innerWidth / 2 : maximized ? 0 : position.x,&#10;&#9;&#9;&#9;top: minimized ? window.innerHeight - taskbarHeight : maximized ? 0 : position.y,&#10;&#9;&#9;&#9;width: minimized ? 0 : maximized ? window.innerWidth : width,&#10;&#9;&#9;&#9;height: minimized ? 0 : maximized ? window.innerHeight : height,&#10;&#9;&#9;&#9;borderColor: minimized ? 'transparent' : 'black',&#10;&#9;&#9;&#9;zIndex: zIndex,&#10;&#9;&#9;&#9;transitionProperty: isGrabbing ? 'none' : 'all',&#10;&#9;&#9;}}&#10;&#9;&gt;&#10;&#9;&#9;{app.header()}&#10;&#9;&#9;{app.render()}&#10;&#9;&lt;/div&gt;;&#10;}" />
              <option name="updatedContent" value="'use client';&#10;&#10;import { OSApp } from '@/lib/features/OSApp/OSApp';&#10;import { useEffect, useState, useRef } from 'react';&#10;import { useAppDispatch, useAppSelector } from '@/lib/hooks';&#10;import { addOpenApp, removeOpenApp } from '@/lib/features/taskbar/taskbarSlice';&#10;import {&#10;&#9;closeApp, focusApp,&#10;&#9;maximizeApp,&#10;&#9;minimizeApp,&#10;&#9;unmaximizeApp,&#10;&#9;unminimizeApp,&#10;} from '@/lib/features/windowManager/windowManagerSlice';&#10;&#10;export interface AppWindowProps {&#10;&#9;width?: number;&#10;&#9;height?: number;&#10;&#9;x?: number;&#10;&#9;y?: number;&#10;}&#10;&#10;export interface OSAppWindowProps {&#10;&#9;props?: AppWindowProps;&#10;&#9;app: OSApp;&#10;}&#10;&#10;export default function OSAppWindow({ props, app }: OSAppWindowProps) {&#10;&#9;const dispatch = useAppDispatch();&#10;&#10;&#9;const taskbarHeight = useAppSelector(state =&gt; state.settings.taskbarHeight);&#10;&#9;const maximized = useAppSelector(state =&gt; state.windowManager.openApps).find(cApp =&gt; cApp.pid === app.appFile.id)!.isMaximized;&#10;&#9;const minimized = useAppSelector(state =&gt; state.windowManager.openApps).find(cApp =&gt; cApp.pid === app.appFile.id)!.isMinimized;&#10;&#9;const zIndex = useAppSelector(state =&gt; state.windowManager.openApps).find(cApp =&gt; cApp.pid === app.appFile.id)!.zIndex;&#10;&#10;&#9;const [width, setWidth] = useState(props?.width ?? app.defaultWidth);&#10;&#9;const [height, setHeight] = useState(props?.height ?? app.defaultHeight);&#10;&#10;&#9;const [isGrabbing, setIsGrabbing] = useState(false);&#10;&#9;const [position, setPosition] = useState({&#10;&#9;&#9;x: props?.x ?? window.innerWidth / 2 - width / 2,&#10;&#9;&#9;y: props?.y ?? window.innerHeight / 2 - height / 2,&#10;&#9;});&#10;&#9;const prevMouseRef = useRef({ x: 0, y: 0 });&#10;&#10;&#9;useEffect(() =&gt; {&#10;&#9;&#9;dispatch(addOpenApp(app.appFile));&#10;&#10;&#9;&#9;return () =&gt; {&#10;&#9;&#9;&#9;dispatch(removeOpenApp(app.appFile));&#10;&#9;&#9;};&#10;&#9;}, [app.appFile, dispatch]);&#10;&#10;&#9;useEffect(() =&gt; {&#10;&#9;&#9;app.setOnGrab(e =&gt; {&#10;&#9;&#9;&#9;setIsGrabbing(true);&#10;&#9;&#9;&#9;prevMouseRef.current = { x: e.clientX, y: e.clientY };&#10;&#9;&#9;});&#10;&#9;&#9;app.setOnGrabbing(e =&gt; {&#10;&#9;&#9;&#9;const deltaX = e.clientX - prevMouseRef.current.x;&#10;&#9;&#9;&#9;const deltaY = e.clientY - prevMouseRef.current.y;&#10;&#10;&#9;&#9;&#9;setPosition(prev =&gt; ({&#10;&#9;&#9;&#9;&#9;x: prev.x + deltaX,&#10;&#9;&#9;&#9;&#9;y: prev.y + deltaY,&#10;&#9;&#9;&#9;}));&#10;&#9;&#9;&#9;prevMouseRef.current = { x: e.clientX, y: e.clientY };&#10;&#9;&#9;});&#10;&#9;&#9;app.setOnRelease(e =&gt; {&#10;&#9;&#9;&#9;setIsGrabbing(false);&#10;&#9;&#9;});&#10;&#9;&#9;app.setOnMaximize(() =&gt; {&#10;&#9;&#9;&#9;if (!maximized)&#10;&#9;&#9;&#9;&#9;dispatch(maximizeApp(app.appFile.id));&#10;&#9;&#9;&#9;else&#10;&#9;&#9;&#9;&#9;dispatch(unmaximizeApp(app.appFile.id));&#10;&#9;&#9;});&#10;&#9;&#9;app.setOnMinimize(() =&gt; {&#10;&#9;&#9;&#9;if (!minimized)&#10;&#9;&#9;&#9;&#9;dispatch(minimizeApp(app.appFile.id));&#10;&#9;&#9;&#9;else&#10;&#9;&#9;&#9;&#9;dispatch(unminimizeApp(app.appFile.id));&#10;&#9;&#9;});&#10;&#9;&#9;app.setOnClose(() =&gt; {&#10;&#9;&#9;&#9;dispatch(closeApp(app.appFile.id));&#10;&#9;&#9;});&#10;&#9;}, [app, dispatch, maximized, minimized]);&#10;&#10;&#9;return &lt;div&#10;&#9;&#9;className=&quot;absolute flex flex-col rounded-lg overflow-hidden border-[1px] transition-all duration-300&quot;&#10;&#9;&#9;onMouseDown={e =&gt; {&#10;&#9;&#9;&#9;e.stopPropagation();&#10;&#9;&#9;}}&#10;&#9;&#9;onMouseDownCapture={e =&gt; {&#10;&#9;&#9;&#9;dispatch(focusApp(app.appFile.id));&#10;&#9;&#9;}}&#10;&#9;&#9;style={{&#10;&#9;&#9;&#9;left: minimized ? window.innerWidth / 2 : maximized ? 0 : position.x,&#10;&#9;&#9;&#9;top: minimized ? window.innerHeight - taskbarHeight : maximized ? 0 : position.y,&#10;&#9;&#9;&#9;width: minimized ? 0 : maximized ? window.innerWidth : width,&#10;&#9;&#9;&#9;height: minimized ? 0 : maximized ? window.innerHeight : height,&#10;&#9;&#9;&#9;borderColor: minimized ? 'transparent' : 'black',&#10;&#9;&#9;&#9;zIndex: zIndex,&#10;&#9;&#9;&#9;transitionProperty: isGrabbing ? 'none' : 'all',&#10;&#9;&#9;}}&#10;&#9;&gt;&#10;&#9;&#9;{app.header()}&#10;&#9;&#9;{app.render()}&#10;&#9;&lt;/div&gt;;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>