<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/README.md" />
              <option name="originalContent" value="# Runnit OS&#10;&#10;Runnit OS is a desktop-style environment built with Next.js and TypeScript. It provides:&#10;&#10;- A customizable desktop with wallpaper and draggable icons&#10;- A taskbar featuring an app launcher and running indicators&#10;- A window manager that supports multiple resizable, movable windows&#10;- Built-in OS apps: Bin (recycle bin) and Explorer (file browser)&#10;- Modular architecture for adding new OS-style apps&#10;- State management via Redux Toolkit slices&#10;&#10;## Repository Structure&#10;&#10;```text&#10;public/&#10;  wallpaper.jpg&#10;  icons/&#10;    app-launcher.png&#10;    bin.png&#10;    explorer.png&#10;src/&#10;  app/&#10;    globals.css         # global styles&#10;    layout.tsx          # root layout&#10;    page.tsx            # main desktop entry&#10;    providers/&#10;      StoreProvider.tsx # Redux store provider&#10;  lib/&#10;    hooks.ts            # custom React hooks&#10;    store.ts            # Redux store setup&#10;    features/           # feature slices/components&#10;      desktop/&#10;      taskbar/&#10;      windowManager/&#10;      OSApp/&#10;      settings/&#10;    OSApps/             # app registry &amp; implementations&#10;      AppRegistry.ts&#10;      AppList.ts&#10;      apps/&#10;        bin/&#10;        explorer/&#10;```&#10;&#10;## Getting Started&#10;&#10;1. Install dependencies&#10;   ```bash&#10;   npm install&#10;   ```&#10;2. Run the dev server&#10;   ```bash&#10;   npm run dev&#10;   ```&#10;3. Open http://localhost:3000 to view the desktop&#10;&#10;## Customization&#10;&#10;- To add a new OS app:&#10;    1. Create a folder under `src/lib/OSApps/apps/` with your component&#10;    2. Register it in `AppRegistry.ts`&#10;    3. Add its icon to `public/icons/` and update `AppList.ts`&#10;- Change the wallpaper by replacing `public/wallpaper.jpg`&#10;- Tweak styles in `src/app/globals.css`&#10;&#10;## Tech Stack&#10;&#10;- Next.js&#10;- React 18&#10;- Redux Toolkit&#10;- TypeScript&#10;- CSS Modules / PostCSS&#10;&#10;## License&#10;&#10;Released under the MIT License.&#10;" />
              <option name="updatedContent" value="# Runnit OS&#10;&#10;Runnit OS is a desktop-style environment built with Next.js and TypeScript that simulates a traditional desktop experience on the web.&#10;&#10;## Key Features&#10;&#10;- Customizable desktop: change wallpaper and rearrange draggable icons&#10;- Taskbar with searchable app launcher, running app indicators, and quick access to apps&#10;- Advanced window manager: open multiple resizable, movable, minimizable, and maximizable windows with snap support&#10;- Built-in OS apps:&#10;  - Bin: restore or permanently delete files&#10;  - Explorer: navigate and manage a mock file system&#10;- Settings panel: adjust preferences like theme, wallpaper, and keyboard shortcuts&#10;- Modular OSApp framework: easily add or remove apps with isolated state and icons&#10;- Global state management using Redux Toolkit for predictable, easy-to-debug updates&#10;- Responsive design: adapts seamlessly across different screen resolutions and window sizes&#10;&#10;## Usage Guide&#10;&#10;1. Double-click or select + press Enter on desktop icons to launch apps&#10;2. Drag icons on the desktop to reorganize as you prefer&#10;3. Use the App Launcher in the taskbar to search, pin, and open applications&#10;4. Click and drag window title bars to move windows; drag edges or corners to resize&#10;5. Minimize, maximize, or close windows via the title bar controls&#10;6. Right-click on the desktop to open the context menu for wallpaper settings and refreshing&#10;7. Browse files in the Explorer app; deleted items are sent to the Bin for recovery or permanent removal&#10;8. Open the Settings app from the taskbar to customize themes, wallpapers, and shortcuts&#10;&#10;## Repository Structure&#10;&#10;```text&#10;public/&#10;  wallpaper.jpg&#10;  icons/&#10;    app-launcher.png&#10;    bin.png&#10;    explorer.png&#10;src/&#10;  app/&#10;    globals.css         # global styles&#10;    layout.tsx          # root layout&#10;    page.tsx            # main desktop entry&#10;    providers/&#10;      StoreProvider.tsx # Redux store provider&#10;  lib/&#10;    hooks.ts            # custom React hooks&#10;    store.ts            # Redux store setup&#10;    features/           # feature slices/components&#10;      desktop/&#10;      taskbar/&#10;      windowManager/&#10;      OSApp/&#10;      settings/&#10;    OSApps/             # app registry &amp; implementations&#10;      AppRegistry.ts&#10;      AppList.ts&#10;      apps/&#10;        bin/&#10;        explorer/&#10;```&#10;&#10;## Getting Started&#10;&#10;1. Install dependencies&#10;   ```bash&#10;   npm install&#10;   ```&#10;2. Run the dev server&#10;   ```bash&#10;   npm run dev&#10;   ```&#10;3. Open http://localhost:3000 to view the desktop&#10;&#10;## Customization&#10;&#10;### Adding New OS Apps&#10;- Create a folder under `src/lib/OSApps/apps/` with your app component and assets&#10;- Update `AppRegistry.ts` with metadata (name, icon, default props)&#10;- Import and list your app in `AppList.ts` to make it available in the launcher&#10;&#10;### Wallpaper and Themes&#10;- Replace or add images in `public/` (e.g., `wallpaper.jpg`, `wallpaper-2.jpg`)&#10;- Update `src/app/globals.css` to define CSS variables for colors, font sizes, and backgrounds&#10;- Use `:root` selectors or theme-specific classes to switch themes dynamically via the Settings app&#10;&#10;### Desktop Icons and Layout&#10;- Modify default icon positions in `desktopSlice.ts` under `src/lib/features/desktop/`&#10;- Add or remove desktop shortcuts by adjusting the initial state array (id, label, icon, appId, position)&#10;- Drag-and-drop behavior is handled in `Desktop.tsx`â€”customize drag constraints or snap-to-grid settings there&#10;&#10;### Taskbar and Context Menu&#10;- Configure pinned apps and launcher behavior in `taskbarSlice.ts`&#10;- Edit context menu options (right-click on desktop) by updating the menu items in `Desktop.tsx` or a dedicated context module&#10;- Replace taskbar icons in `public/icons/` and reference new names in `Taskbar.tsx`&#10;&#10;### Keyboard Shortcuts and Accessibility&#10;- Define or override keybindings in `settingsSlice.ts` under `src/lib/features/settings/`&#10;- Hooks in `hooks.ts` listen for global shortcuts; modify or add handlers as needed&#10;- Ensure all interactive elements have ARIA attributes in component JSX for screen-reader compatibility&#10;&#10;## Tech Stack&#10;&#10;- Next.js&#10;- React 18&#10;- Redux Toolkit&#10;- TypeScript&#10;- CSS Modules / PostCSS&#10;&#10;## License&#10;&#10;Released under the MIT License." />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>