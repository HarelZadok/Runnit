<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/README.md" />
              <option name="originalContent" value="This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).&#10;&#10;## Getting Started&#10;&#10;First, run the development server:&#10;&#10;```bash&#10;npm run dev&#10;# or&#10;yarn dev&#10;# or&#10;pnpm dev&#10;# or&#10;bun dev&#10;```&#10;&#10;Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.&#10;&#10;You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.&#10;&#10;This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.&#10;&#10;## Learn More&#10;&#10;To learn more about Next.js, take a look at the following resources:&#10;&#10;- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.&#10;- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.&#10;&#10;You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!&#10;&#10;## Deploy on Vercel&#10;&#10;The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&amp;filter=next.js&amp;utm_source=create-next-app&amp;utm_campaign=create-next-app-readme) from the creators of Next.js.&#10;&#10;Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.&#10;" />
              <option name="updatedContent" value="# Runnit OS&#10;&#10;Runnit OS is a desktop-like environment built with Next.js and TypeScript, featuring a customizable desktop, taskbar, window manager, and OS-style applications such as Bin and Explorer. This project demonstrates advanced state management and UI composition using React, Redux Toolkit, and modern CSS.&#10;&#10;## Features&#10;&#10;- Desktop with wallpaper and draggable icons&#10;- Taskbar with application launcher and running indicators&#10;- Window manager supporting multiple resizable and movable windows&#10;- Built-in apps: &#10;  - Bin (recycle bin)  &#10;  - Explorer (file browser)&#10;- Modular architecture for adding new OS-style apps&#10;- State management via Redux Toolkit slices&#10;&#10;## Repository Structure&#10;&#10;```text&#10;public/&#10;  wallpaper.jpg&#10;  icons/&#10;    app-launcher.png&#10;    bin.png&#10;    explorer.png&#10;src/&#10;  app/&#10;    globals.css         # global styles&#10;    layout.tsx          # root layout&#10;    page.tsx            # main entry for desktop&#10;    providers/&#10;      StoreProvider.tsx # Redux store provider&#10;  lib/&#10;    hooks.ts            # custom React hooks&#10;    store.ts            # Redux store setup&#10;    features/           # feature slices and components&#10;      desktop/&#10;        Desktop.tsx&#10;        desktopSlice.ts&#10;      taskbar/&#10;        Taskbar.tsx&#10;        taskbarSlice.ts&#10;      windowManager/&#10;        windowManagerSlice.ts&#10;      OSApp/&#10;        OSApp.tsx&#10;        OSAppWindow.tsx&#10;        OSAppFile.tsx&#10;      settings/&#10;        settingsSlice.ts&#10;    OSApps/             # registry and app implementations&#10;      AppRegistry.ts&#10;      AppList.ts&#10;      apps/&#10;        bin/&#10;          Bin.tsx&#10;        explorer/&#10;          Explorer.tsx&#10;```&#10;&#10;## Getting Started&#10;&#10;1. Install dependencies:&#10;&#10;   ```bash&#10;   npm install&#10;   ```&#10;&#10;2. Start the development server:&#10;&#10;   ```bash&#10;   npm run dev&#10;   ```&#10;&#10;3. Open [http://localhost:3000](http://localhost:3000) in your browser to view the desktop environment.&#10;&#10;## Customization&#10;&#10;- To add a new OS app:&#10;  1. Create a new folder under `src/lib/OSApps/apps/` with its own component.&#10;  2. Register the app in `AppRegistry.ts`.&#10;  3. Add an icon in `public/icons/` and update `AppList.ts`.&#10;- Change the wallpaper by replacing `public/wallpaper.jpg`.&#10;- Adjust global styles in `src/app/globals.css`.&#10;&#10;## Tech Stack&#10;&#10;- Next.js&#10;- React 18&#10;- Redux Toolkit&#10;- TypeScript&#10;- CSS Modules / PostCSS&#10;&#10;## License&#10;&#10;This project is licensed under the MIT License." />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/layout.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/layout.tsx" />
              <option name="originalContent" value="import type { Metadata } from 'next';&#10;import './globals.css';&#10;import React from 'react';&#10;&#10;export const metadata: Metadata = {&#10;  title: 'Runnit',&#10;  description: 'Runnit',&#10;};&#10;&#10;export default function RootLayout({&#10;                                     children,&#10;                                   }: Readonly&lt;{&#10;  children: React.ReactNode;&#10;}&gt;) {&#10;  return (&#10;    &lt;html lang=&quot;en&quot;&gt;&#10;    &lt;body&#10;      className={`antialiased`}&#10;    &gt;&#10;    {children}&#10;    &lt;/body&gt;&#10;    &lt;/html&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="// Entry point layout for the entire Next.js application&#10;import type { Metadata } from 'next';&#10;import './globals.css';  // Global CSS resets and styles&#10;import React from 'react';&#10;&#10;// Metadata for the application (used in &lt;head&gt;)&#10;export const metadata: Metadata = {&#10;  title: 'Runnit',        // Title displayed in browser tab&#10;  description: 'Runnit',  // Description meta-tag&#10;};&#10;&#10;// RootLayout wraps all pages with HTML structure and provides global styles&#10;export default function RootLayout({ children }: Readonly&lt;{ children: React.ReactNode; }&gt;) {&#10;  return (&#10;    &lt;html lang=&quot;en&quot;&gt;&#10;      &lt;body className=&quot;antialiased&quot;&gt;  {/* Enable smoother font rendering */}&#10;        {children}  {/* Render the application content here */}&#10;      &lt;/body&gt;&#10;    &lt;/html&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/page.tsx" />
              <option name="originalContent" value="import Desktop from '@/lib/features/dekstop/Desktop';&#10;import StoreProvider from '@/app/providers/StoreProvider';&#10;&#10;export default function Home() {&#10;&#9;return (&#10;&#9;&#9;&lt;div className=&quot;overflow-hidden&quot;&gt;&#10;&#9;&#9;&#9;&lt;main className=&quot;overflow-hidden&quot;&gt;&#10;&#9;&#9;&#9;&#9;&lt;StoreProvider&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;Desktop /&gt;&#10;&#9;&#9;&#9;&#9;&lt;/StoreProvider&gt;&#10;&#9;&#9;&#9;&lt;/main&gt;&#10;&#9;&#9;&lt;/div&gt;&#10;&#9;);&#10;}&#10;" />
              <option name="updatedContent" value="// Main page: wraps Desktop with Redux provider&#10;import Desktop from '@/lib/features/dekstop/Desktop';  // Desktop component for icon grid and windows&#10;import StoreProvider from '@/app/providers/StoreProvider';  // Initializes Redux store for the app&#10;&#10;export default function Home() {&#10;&#9;return (&#10;&#9;&#9;&lt;div className=&quot;overflow-hidden&quot;&gt;&#10;&#9;&#9;&#9;&lt;main className=&quot;overflow-hidden&quot;&gt;&#10;&#9;&#9;&#9;&#9;&lt;StoreProvider&gt;&#10;&#9;&#9;&#9;&#9;&#9;{/* Provide Redux store to Desktop and its children */}&#10;&#9;&#9;&#9;&#9;&#9;&lt;Desktop /&gt;  {/* Main desktop interface */}&#10;&#9;&#9;&#9;&#9;&lt;/StoreProvider&gt;&#10;&#9;&#9;&#9;&lt;/main&gt;&#10;&#9;&#9;&lt;/div&gt;&#10;&#9;);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/providers/StoreProvider.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/providers/StoreProvider.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import React, { useRef } from 'react';&#10;import { Provider } from 'react-redux';&#10;import { makeStore, AppStore } from '@/lib/store';&#10;&#10;export default function StoreProvider({ children }: { children: React.ReactNode }) {&#10;  const storeRef = useRef&lt;AppStore | null&gt;(null);&#10;&#10;  if (!storeRef.current) {&#10;    storeRef.current = makeStore();&#10;  }&#10;&#10;  return &lt;Provider store={storeRef.current}&gt;{children}&lt;/Provider&gt;;&#10;}" />
              <option name="updatedContent" value="'use client';&#13;&#10;&#13;&#10;import React, { useRef } from 'react';&#13;&#10;import { Provider } from 'react-redux';&#13;&#10;import { makeStore, AppStore } from '@/lib/store';&#13;&#10;&#13;&#10;// StoreProvider: wraps app with Redux provider and persists store instance&#13;&#10;export default function StoreProvider({ children }: { children: React.ReactNode }) {&#13;&#10;  // useRef ensures single store instance per client session&#13;&#10;  const storeRef = useRef&lt;AppStore | null&gt;(null);&#13;&#10;&#13;&#10;  // Initialize store on first render&#13;&#10;  if (!storeRef.current) {&#13;&#10;    storeRef.current = makeStore();&#13;&#10;  }&#13;&#10;&#13;&#10;  // Provide Redux store to child components&#13;&#10;  return &lt;Provider store={storeRef.current}&gt;{children}&lt;/Provider&gt;;&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/lib/OSApps/AppList.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/lib/OSApps/AppList.ts" />
              <option name="originalContent" value="import Bin from '@/lib/OSApps/apps/bin/Bin';&#10;import Explorer from '@/lib/OSApps/apps/explorer/Explorer';&#10;&#10;new Bin();&#10;new Explorer();&#10;" />
              <option name="updatedContent" value="// AppList.ts: Instantiate and register all available OS-style applications&#13;&#10;&#13;&#10;import Bin from '@/lib/OSApps/apps/bin/Bin';&#13;&#10;import Explorer from '@/lib/OSApps/apps/explorer/Explorer';&#13;&#10;&#13;&#10;new Bin();&#13;&#10;new Explorer();" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/lib/features/OSApp/OSApp.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/lib/features/OSApp/OSApp.tsx" />
              <option name="originalContent" value="import React, { ReactElement } from 'react';&#10;import { OSAppFileProps } from '@/lib/features/OSApp/OSAppFile';&#10;import { RiCloseLargeLine } from 'react-icons/ri';&#10;import { FiMaximize } from 'react-icons/fi';&#10;import { IoIosArrowDown } from 'react-icons/io';&#10;import Image from 'next/image';&#10;&#10;export interface OSAppProps {&#10;&#9;appFile: OSAppFileProps;&#10;&#9;header: () =&gt; ReactElement;&#10;&#9;render: () =&gt; ReactElement;&#10;&#9;defaultWidth: number;&#10;&#9;defaultHeight: number;&#10;}&#10;&#10;export abstract class OSApp implements OSAppProps {&#10;&#9;public appFile: OSAppFileProps;&#10;&#9;public defaultWidth: number;&#10;&#9;public defaultHeight: number;&#10;&#9;private onGrab: ((event: React.DragEvent&lt;HTMLDivElement&gt;) =&gt; void) | undefined;&#10;&#9;private onGrabbing: ((event: React.DragEvent&lt;HTMLDivElement&gt;) =&gt; void) | undefined;&#10;&#9;private onRelease: ((event: React.DragEvent&lt;HTMLDivElement&gt;) =&gt; void) | undefined;&#10;&#9;private isDragging: boolean = false;&#10;&#9;private isMaximized = false;&#10;&#9;private onMaximize: (() =&gt; void) | undefined;&#10;&#9;private isMinimized = false;&#10;&#9;private onMinimize: (() =&gt; void) | undefined;&#10;&#9;private onClose: (() =&gt; void) | undefined;&#10;&#10;&#10;&#9;protected constructor(id: number, name: string, icon: string) {&#10;&#9;&#9;this.appFile = {&#10;&#9;&#9;&#9;id: id,&#10;&#9;&#9;&#9;name: name,&#10;&#9;&#9;&#9;icon: icon,&#10;&#9;&#9;};&#10;&#10;&#9;&#9;this.defaultWidth = 1100;&#10;&#9;&#9;this.defaultHeight = 700;&#10;&#9;}&#10;&#10;&#9;setOnGrab = (callback: (event: React.DragEvent&lt;HTMLDivElement&gt;) =&gt; void) =&gt; {&#10;&#9;&#9;this.onGrab = callback;&#10;&#9;};&#10;&#10;&#9;setOnGrabbing = (callback: (event: React.DragEvent&lt;HTMLDivElement&gt;) =&gt; void) =&gt; {&#10;&#9;&#9;this.onGrabbing = callback;&#10;&#9;};&#10;&#10;&#9;setOnRelease = (callback: (event: React.DragEvent&lt;HTMLDivElement&gt;) =&gt; void) =&gt; {&#10;&#9;&#9;this.onRelease = callback;&#10;&#9;};&#10;&#10;&#9;setOnMaximize = (callback: () =&gt; void) =&gt; {&#10;&#9;&#9;this.onMaximize = callback;&#10;&#9;};&#10;&#10;&#9;setOnMinimize = (callback: () =&gt; void) =&gt; {&#10;&#9;&#9;this.onMinimize = callback;&#10;&#9;};&#10;&#10;&#9;setOnClose = (callback: () =&gt; void) =&gt; {&#10;&#9;&#9;this.onClose = callback;&#10;&#9;};&#10;&#10;&#9;header(): ReactElement {&#10;&#9;&#9;return &lt;div className=&quot;flex flex-row justify-between items-center h-10 bg-[#000000AA] backdrop-blur-3xl text-white&quot;&gt;&#10;&#9;&#9;&#9;&lt;div&#10;&#9;&#9;&#9;&#9;// onContextMenu={onContextMenu}&#10;&#9;&#9;&#9;&#9;onMouseUp={this.onDragEnd}&#10;&#9;&#9;&#9;&#9;onMouseMove={this.onDragging}&#10;&#9;&#9;&#9;&#9;onMouseDown={this.onDragStart}&#10;&#9;&#9;&#9;&#9;className=&quot;w-full h-full flex flex-row items-center px-2 gap-2&quot;&#10;&#9;&#9;&#9;&gt;&#10;&#9;&#9;&#9;&#9;&lt;Image src={this.appFile.icon} alt=&quot;&quot; width={20} height={20} /&gt;&#10;&#9;&#9;&#9;&#9;&lt;small&gt;{this.appFile.name}&lt;/small&gt;&#10;&#9;&#9;&#9;&lt;/div&gt;&#10;&#9;&#9;&#9;&lt;div className=&quot;h-full flex flex-row cursor-pointer&quot;&gt;&#10;&#9;&#9;&#9;&#9;&lt;div className=&quot;hover:bg-gray-300 text-gray-300 hover:text-black h-full w-8 flex justify-center items-center&quot;&#10;&#9;&#9;&#9;&#9;&#9;&#9; onClick={() =&gt; {&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9; this.isMinimized = !this.isMinimized;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9; if (this.onMinimize) this.onMinimize();&#10;&#9;&#9;&#9;&#9;&#9;&#9; }}&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;IoIosArrowDown /&gt;&#10;&#9;&#9;&#9;&#9;&lt;/div&gt;&#10;&#9;&#9;&#9;&#9;&lt;div&#10;&#9;&#9;&#9;&#9;&#9;className=&quot;hover:bg-yellow-500 text-yellow-500 hover:text-black h-full w-8 flex justify-center items-center&quot;&#10;&#9;&#9;&#9;&#9;&#9;onClick={() =&gt; {&#10;&#9;&#9;&#9;&#9;&#9;&#9;this.isMaximized = !this.isMaximized;&#10;&#9;&#9;&#9;&#9;&#9;&#9;if (this.onMaximize) this.onMaximize();&#10;&#9;&#9;&#9;&#9;&#9;}}&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;FiMaximize /&gt;&#10;&#9;&#9;&#9;&#9;&lt;/div&gt;&#10;&#9;&#9;&#9;&#9;&lt;div className=&quot;hover:bg-red-500 text-red-500 hover:text-black h-full w-8 flex justify-center items-center&quot;&#10;&#9;&#9;&#9;&#9;&#9;&#9; onClick={() =&gt; {&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9; if (this.onClose)&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9; this.onClose();&#10;&#9;&#9;&#9;&#9;&#9;&#9; }}&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;RiCloseLargeLine /&gt;&#10;&#9;&#9;&#9;&#9;&lt;/div&gt;&#10;&#9;&#9;&#9;&lt;/div&gt;&#10;&#9;&#9;&lt;/div&gt;;&#10;&#9;};&#10;&#10;&#9;render(): ReactElement {&#10;&#9;&#9;return &lt;div onMouseDown={e =&gt; e.stopPropagation()}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;className=&quot;bg-white h-full w-full flex justify-center items-center&quot;&gt;&#10;&#9;&#9;&#9;&lt;p className=&quot;text-black&quot;&gt;Override {this.constructor.name}.render() to update the app.&lt;/p&gt;&#10;&#9;&#9;&lt;/div&gt;;&#10;&#9;};&#10;&#10;&#9;getProps(): OSAppProps {&#10;&#9;&#9;return {&#10;&#9;&#9;&#9;appFile: this.appFile,&#10;&#9;&#9;&#9;header: this.header,&#10;&#9;&#9;&#9;render: this.render,&#10;&#9;&#9;&#9;defaultWidth: this.defaultWidth,&#10;&#9;&#9;&#9;defaultHeight: this.defaultHeight,&#10;&#9;&#9;};&#10;&#9;}&#10;&#10;&#9;protected onDragStart = (event: React.DragEvent&lt;HTMLDivElement&gt;) =&gt; {&#10;&#9;&#9;event.stopPropagation();&#10;&#9;&#9;this.isDragging = true;&#10;&#9;&#9;if (this.onGrab)&#10;&#9;&#9;&#9;this.onGrab(event);&#10;&#9;};&#10;&#10;&#9;protected onDragging = (event: React.DragEvent&lt;HTMLDivElement&gt;) =&gt; {&#10;&#9;&#9;if (!this.isDragging) return;&#10;&#10;&#9;&#9;event.stopPropagation();&#10;&#9;&#9;if (this.onGrabbing)&#10;&#9;&#9;&#9;this.onGrabbing(event);&#10;&#9;};&#10;&#10;&#9;protected onDragEnd = (event: React.DragEvent&lt;HTMLDivElement&gt;) =&gt; {&#10;&#9;&#9;if (!this.isDragging) return;&#10;&#10;&#9;&#9;event.stopPropagation();&#10;&#9;&#9;if (this.onRelease)&#10;&#9;&#9;&#9;this.onRelease(event);&#10;&#9;&#9;this.isDragging = false;&#10;&#9;};&#10;}" />
              <option name="updatedContent" value="import React, { ReactElement } from 'react';&#13;&#10;import { OSAppFileProps } from '@/lib/features/OSApp/OSAppFile';&#13;&#10;import { RiCloseLargeLine } from 'react-icons/ri';&#13;&#10;import { FiMaximize } from 'react-icons/fi';&#13;&#10;import { IoIosArrowDown } from 'react-icons/io';&#13;&#10;import Image from 'next/image';&#13;&#10;&#13;&#10;// OSApp.tsx: Base class for all OS-style applications, handling window control hooks and metadata&#13;&#10;export interface OSAppProps {&#13;&#10;&#9;appFile: OSAppFileProps;&#13;&#10;&#9;header: () =&gt; ReactElement;&#13;&#10;&#9;render: () =&gt; ReactElement;&#13;&#10;&#9;defaultWidth: number;&#13;&#10;&#9;defaultHeight: number;&#13;&#10;}&#13;&#10;&#13;&#10;export abstract class OSApp implements OSAppProps {&#13;&#10;&#9;// appFile stores basic info (id, name, icon) passed to desktop and taskbar&#13;&#10;&#9;public appFile: OSAppFileProps;&#13;&#10;&#9;// default dimensions for window sizing&#13;&#10;&#9;public defaultWidth: number;&#13;&#10;&#9;public defaultHeight: number;&#13;&#10;&#9;// Internal drag state and lifecycle callbacks&#13;&#10;&#9;private onGrab: ((event: React.DragEvent&lt;HTMLDivElement&gt;) =&gt; void) | undefined;&#13;&#10;&#9;private onGrabbing: ((event: React.DragEvent&lt;HTMLDivElement&gt;) =&gt; void) | undefined;&#13;&#10;&#9;private onRelease: ((event: React.DragEvent&lt;HTMLDivElement&gt;) =&gt; void) | undefined;&#13;&#10;&#9;private isDragging: boolean = false;&#13;&#10;&#9;private isMaximized = false;&#13;&#10;&#9;private onMaximize: (() =&gt; void) | undefined;&#13;&#10;&#9;private isMinimized = false;&#13;&#10;&#9;private onMinimize: (() =&gt; void) | undefined;&#13;&#10;&#9;private onClose: (() =&gt; void) | undefined;&#13;&#10;&#13;&#10;&#13;&#10;&#9;protected constructor(id: number, name: string, icon: string) {&#13;&#10;&#9;&#9;// Initialize app metadata and default window size&#13;&#10;&#9;&#9;this.appFile = {&#13;&#10;&#9;&#9;&#9;id: id,&#13;&#10;&#9;&#9;&#9;name: name,&#13;&#10;&#9;&#9;&#9;icon: icon,&#13;&#10;&#9;&#9;};&#13;&#10;&#13;&#10;&#9;&#9;this.defaultWidth = 1100;&#13;&#10;&#9;&#9;this.defaultHeight = 700;&#13;&#10;&#9;}&#13;&#10;&#13;&#10;&#9;setOnGrab = (callback: (event: React.DragEvent&lt;HTMLDivElement&gt;) =&gt; void) =&gt; {&#13;&#10;&#9;&#9;this.onGrab = callback;&#13;&#10;&#9;};&#13;&#10;&#13;&#10;&#9;setOnGrabbing = (callback: (event: React.DragEvent&lt;HTMLDivElement&gt;) =&gt; void) =&gt; {&#13;&#10;&#9;&#9;this.onGrabbing = callback;&#13;&#10;&#9;};&#13;&#10;&#13;&#10;&#9;setOnRelease = (callback: (event: React.DragEvent&lt;HTMLDivElement&gt;) =&gt; void) =&gt; {&#13;&#10;&#9;&#9;this.onRelease = callback;&#13;&#10;&#9;};&#13;&#10;&#13;&#10;&#9;setOnMaximize = (callback: () =&gt; void) =&gt; {&#13;&#10;&#9;&#9;this.onMaximize = callback;&#13;&#10;&#9;};&#13;&#10;&#13;&#10;&#9;setOnMinimize = (callback: () =&gt; void) =&gt; {&#13;&#10;&#9;&#9;this.onMinimize = callback;&#13;&#10;&#9;};&#13;&#10;&#13;&#10;&#9;setOnClose = (callback: () =&gt; void) =&gt; {&#13;&#10;&#9;&#9;this.onClose = callback;&#13;&#10;&#9;};&#13;&#10;&#13;&#10;&#9;header(): ReactElement {&#13;&#10;&#9;&#9;return &lt;div className=&quot;flex flex-row justify-between items-center h-10 bg-[#000000AA] backdrop-blur-3xl text-white&quot;&gt;&#13;&#10;&#9;&#9;&#9;&lt;div&#13;&#10;&#9;&#9;&#9;&#9;// onContextMenu={onContextMenu}&#13;&#10;&#9;&#9;&#9;&#9;onMouseUp={this.onDragEnd}&#13;&#10;&#9;&#9;&#9;&#9;onMouseMove={this.onDragging}&#13;&#10;&#9;&#9;&#9;&#9;onMouseDown={this.onDragStart}&#13;&#10;&#9;&#9;&#9;&#9;className=&quot;w-full h-full flex flex-row items-center px-2 gap-2&quot;&#13;&#10;&#9;&#9;&#9;&gt;&#13;&#10;&#9;&#9;&#9;&#9;&lt;Image src={this.appFile.icon} alt=&quot;&quot; width={20} height={20} /&gt;&#13;&#10;&#9;&#9;&#9;&#9;&lt;small&gt;{this.appFile.name}&lt;/small&gt;&#13;&#10;&#9;&#9;&#9;&lt;/div&gt;&#13;&#10;&#9;&#9;&#9;&lt;div className=&quot;h-full flex flex-row cursor-pointer&quot;&gt;&#13;&#10;&#9;&#9;&#9;&#9;&lt;div className=&quot;hover:bg-gray-300 text-gray-300 hover:text-black h-full w-8 flex justify-center items-center&quot;&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9; onClick={() =&gt; {&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9; this.isMinimized = !this.isMinimized;&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9; if (this.onMinimize) this.onMinimize();&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9; }}&gt;&#13;&#10;&#9;&#9;&#9;&#9;&#9;&lt;IoIosArrowDown /&gt;&#13;&#10;&#9;&#9;&#9;&#9;&lt;/div&gt;&#13;&#10;&#9;&#9;&#9;&#9;&lt;div&#13;&#10;&#9;&#9;&#9;&#9;&#9;className=&quot;hover:bg-yellow-500 text-yellow-500 hover:text-black h-full w-8 flex justify-center items-center&quot;&#13;&#10;&#9;&#9;&#9;&#9;&#9;onClick={() =&gt; {&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;this.isMaximized = !this.isMaximized;&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;if (this.onMaximize) this.onMaximize();&#13;&#10;&#9;&#9;&#9;&#9;&#9;}}&gt;&#13;&#10;&#9;&#9;&#9;&#9;&#9;&lt;FiMaximize /&gt;&#13;&#10;&#9;&#9;&#9;&#9;&lt;/div&gt;&#13;&#10;&#9;&#9;&#9;&#9;&lt;div className=&quot;hover:bg-red-500 text-red-500 hover:text-black h-full w-8 flex justify-center items-center&quot;&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9; onClick={() =&gt; {&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9; if (this.onClose)&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9; this.onClose();&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9; }}&gt;&#13;&#10;&#9;&#9;&#9;&#9;&#9;&lt;RiCloseLargeLine /&gt;&#13;&#10;&#9;&#9;&#9;&#9;&lt;/div&gt;&#13;&#10;&#9;&#9;&#9;&lt;/div&gt;&#13;&#10;&#9;&#9;&lt;/div&gt;;&#13;&#10;&#9;};&#13;&#10;&#13;&#10;&#9;render(): ReactElement {&#13;&#10;&#9;&#9;return &lt;div onMouseDown={e =&gt; e.stopPropagation()}&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;className=&quot;bg-white h-full w-full flex justify-center items-center&quot;&gt;&#13;&#10;&#9;&#9;&#9;&lt;p className=&quot;text-black&quot;&gt;Override {this.constructor.name}.render() to update the app.&lt;/p&gt;&#13;&#10;&#9;&#9;&lt;/div&gt;;&#13;&#10;&#9;};&#13;&#10;&#13;&#10;&#9;getProps(): OSAppProps {&#13;&#10;&#9;&#9;return {&#13;&#10;&#9;&#9;&#9;appFile: this.appFile,&#13;&#10;&#9;&#9;&#9;header: this.header,&#13;&#10;&#9;&#9;&#9;render: this.render,&#13;&#10;&#9;&#9;&#9;defaultWidth: this.defaultWidth,&#13;&#10;&#9;&#9;&#9;defaultHeight: this.defaultHeight,&#13;&#10;&#9;&#9;};&#13;&#10;&#9;}&#13;&#10;&#13;&#10;&#9;protected onDragStart = (event: React.DragEvent&lt;HTMLDivElement&gt;) =&gt; {&#13;&#10;&#9;&#9;// Begin drag, invoke external handler if provided&#13;&#10;&#9;&#9;event.stopPropagation();&#13;&#10;&#9;&#9;this.isDragging = true;&#13;&#10;&#9;&#9;if (this.onGrab)&#13;&#10;&#9;&#9;&#9;this.onGrab(event);&#13;&#10;&#9;};&#13;&#10;&#13;&#10;&#9;protected onDragging = (event: React.DragEvent&lt;HTMLDivElement&gt;) =&gt; {&#13;&#10;&#9;&#9;// Continue drag movement&#13;&#10;&#9;&#9;if (!this.isDragging) return;&#13;&#10;&#13;&#10;&#9;&#9;event.stopPropagation();&#13;&#10;&#9;&#9;if (this.onGrabbing)&#13;&#10;&#9;&#9;&#9;this.onGrabbing(event);&#13;&#10;&#9;};&#13;&#10;&#13;&#10;&#9;protected onDragEnd = (event: React.DragEvent&lt;HTMLDivElement&gt;) =&gt; {&#13;&#10;&#9;&#9;// End drag, invoke release handler&#13;&#10;&#9;&#9;if (!this.isDragging) return;&#13;&#10;&#13;&#10;&#9;&#9;event.stopPropagation();&#13;&#10;&#9;&#9;if (this.onRelease)&#13;&#10;&#9;&#9;&#9;this.onRelease(event);&#13;&#10;&#9;&#9;this.isDragging = false;&#13;&#10;&#9;};&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/lib/features/OSApp/OSAppFile.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/lib/features/OSApp/OSAppFile.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import { useAppSelector, useAppDispatch } from '@/lib/hooks';&#10;import Image from 'next/image';&#10;import React, { forwardRef, useCallback, useEffect, useState } from 'react';&#10;import { addActiveApp, clearActiveApps, removeActiveApp } from '@/lib/features/dekstop/desktopSlice';&#10;import { launchApp } from '@/lib/features/windowManager/windowManagerSlice';&#10;&#10;export interface OSAppFileProps {&#10;&#9;id: number;&#10;&#9;name: string;&#10;&#9;icon: string;&#10;}&#10;&#10;export const OSAppFile = forwardRef&lt;HTMLDivElement, OSAppFileProps&gt;((props, ref) =&gt; {&#10;&#9;const iconScale = useAppSelector(state =&gt; state.settings.iconScale);&#10;&#9;const dispatch = useAppDispatch();&#10;&#9;const activeApps = useAppSelector(state =&gt; state.desktop.activeApps);&#10;&#9;const [appSelect, setAppSelect] = useState(false);&#10;&#10;&#9;const onClick = useCallback((event: React.MouseEvent&lt;HTMLDivElement&gt;) =&gt; {&#10;&#9;&#9;event.stopPropagation();&#10;&#9;&#9;if (event.ctrlKey) {&#10;&#9;&#9;&#9;if (!appSelect)&#10;&#9;&#9;&#9;&#9;dispatch(addActiveApp(props));&#10;&#9;&#9;&#9;else&#10;&#9;&#9;&#9;&#9;dispatch(removeActiveApp(props));&#10;&#9;&#9;} else if (appSelect) {&#10;&#9;&#9;&#9;// dispatch(renameApp([props.id, 'Haha']));&#10;&#9;&#9;} else {&#10;&#9;&#9;&#9;dispatch(clearActiveApps());&#10;&#9;&#9;&#9;dispatch(addActiveApp(props));&#10;&#9;&#9;}&#10;&#9;}, [appSelect, dispatch, props]);&#10;&#10;&#9;const runApp = useCallback(() =&gt; {&#10;&#9;&#9;dispatch(launchApp(props.id));&#10;&#9;}, [dispatch, props]);&#10;&#10;&#9;const onDragStart = useCallback((event: React.MouseEvent&lt;HTMLDivElement&gt;) =&gt; {&#10;&#9;&#9;event.stopPropagation();&#10;&#9;&#9;event.preventDefault();&#10;&#9;}, []);&#10;&#10;&#9;useEffect(() =&gt; {&#10;&#9;&#9;setAppSelect(activeApps.some(app =&gt; app.id === props.id));&#10;&#9;}, [activeApps, props.id]);&#10;&#10;&#9;return &lt;div&#10;&#9;&#9;className=&quot;flex flex-col justify-center items-center break-inside-avoid select-none hover:bg-[#ffffff30] rounded-md&quot;&#10;&#9;&#9;onClick={onClick}&#10;&#9;&#9;onDoubleClick={runApp}&#10;&#9;&#9;onMouseDown={onDragStart}&#10;&#9;&#9;ref={ref}&#10;&#9;&#9;data-id={props.id}&#10;&#9;&#9;title={props.name}&#10;&#9;&#9;style={{&#10;&#9;&#9;&#9;height: iconScale + 50,&#10;&#9;&#9;&#9;width: iconScale + 10,&#10;&#9;&#9;&#9;backgroundColor: appSelect ? '#ffffff30' : undefined,&#10;&#9;&#9;&#9;border: appSelect ? '1px solid' : undefined,&#10;&#9;&#9;}}&#10;&#9;&gt;&#10;&#9;&#9;&lt;Image width={iconScale} height={iconScale} src={props.icon} alt=&quot;&quot; /&gt;&#10;&#9;&#9;&lt;p&#10;&#9;&#9;&#9;className=&quot;text-center break-words line-clamp-2&quot;&gt;{props.name}&lt;/p&gt;&#10;&#9;&lt;/div&gt;;&#10;});&#10;&#10;OSAppFile.displayName = 'OSAppFile';" />
              <option name="updatedContent" value="// OSAppFile.tsx: Represents a desktop icon for an application, handles selection and launching on double-click&#13;&#10;'use client';&#13;&#10;&#13;&#10;import { useAppSelector, useAppDispatch } from '@/lib/hooks'; // Typed Redux hooks&#13;&#10;import Image from 'next/image';&#13;&#10;import React, { forwardRef, useCallback, useEffect, useState } from 'react';&#13;&#10;import { addActiveApp, clearActiveApps, removeActiveApp } from '@/lib/features/dekstop/desktopSlice';&#13;&#10;import { launchApp } from '@/lib/features/windowManager/windowManagerSlice';&#13;&#10;&#13;&#10;export interface OSAppFileProps {&#13;&#10;&#9;id: number;&#13;&#10;&#9;name: string;&#13;&#10;&#9;icon: string;&#13;&#10;}&#13;&#10;&#13;&#10;export const OSAppFile = forwardRef&lt;HTMLDivElement, OSAppFileProps&gt;((props, ref) =&gt; {&#13;&#10;&#9;// Retrieve icon scale from settings&#13;&#10;&#9;const iconScale = useAppSelector(state =&gt; state.settings.iconScale);&#13;&#10;&#9;const dispatch = useAppDispatch();&#13;&#10;&#9;// Track selection state based on Redux activeApps&#13;&#10;&#9;const activeApps = useAppSelector(state =&gt; state.desktop.activeApps);&#13;&#10;&#9;const [appSelect, setAppSelect] = useState(false);&#13;&#10;&#13;&#10;&#9;// Toggle selection on click; support ctrl-click for multi-selection&#13;&#10;&#9;const onClick = useCallback((event: React.MouseEvent&lt;HTMLDivElement&gt;) =&gt; {&#13;&#10;&#9;&#9;event.stopPropagation();&#13;&#10;&#9;&#9;if (event.ctrlKey) {&#13;&#10;&#9;&#9;&#9;if (!appSelect) dispatch(addActiveApp(props));&#13;&#10;&#9;&#9;&#9;else dispatch(removeActiveApp(props));&#13;&#10;&#9;&#9;} else if (appSelect) {&#13;&#10;&#9;&#9;&#9;// Placeholder: rename logic could go here&#13;&#10;&#9;&#9;} else {&#13;&#10;&#9;&#9;&#9;dispatch(clearActiveApps());&#13;&#10;&#9;&#9;&#9;dispatch(addActiveApp(props));&#13;&#10;&#9;&#9;}&#13;&#10;&#9;}, [appSelect, dispatch, props]);&#13;&#10;&#13;&#10;&#9;// Launch app on double click&#13;&#10;&#9;const runApp = useCallback(() =&gt; {&#13;&#10;&#9;&#9;dispatch(launchApp(props.id));&#13;&#10;&#9;}, [dispatch, props]);&#13;&#10;&#13;&#10;&#9;// Prevent unintended drag behavior&#13;&#10;&#9;const onDragStart = useCallback((event: React.MouseEvent&lt;HTMLDivElement&gt;) =&gt; {&#13;&#10;&#9;&#9;event.stopPropagation();&#13;&#10;&#9;&#9;event.preventDefault();&#13;&#10;&#9;}, []);&#13;&#10;&#13;&#10;&#9;// Update visual selection when Redux activeApps changes&#13;&#10;&#9;useEffect(() =&gt; {&#13;&#10;&#9;&#9;setAppSelect(activeApps.some(app =&gt; app.id === props.id));&#13;&#10;&#9;}, [activeApps, props.id]);&#13;&#10;&#13;&#10;&#9;return &lt;div&#13;&#10;&#9;&#9;className=&quot;flex flex-col justify-center items-center break-inside-avoid select-none hover:bg-[#ffffff30] rounded-md&quot;&#13;&#10;&#9;&#9;onClick={onClick}&#13;&#10;&#9;&#9;onDoubleClick={runApp}&#13;&#10;&#9;&#9;onMouseDown={onDragStart}&#13;&#10;&#9;&#9;ref={ref}&#13;&#10;&#9;&#9;data-id={props.id}&#13;&#10;&#9;&#9;title={props.name}&#13;&#10;&#9;&#9;style={{&#13;&#10;&#9;&#9;&#9;height: iconScale + 50,&#13;&#10;&#9;&#9;&#9;width: iconScale + 10,&#13;&#10;&#9;&#9;&#9;backgroundColor: appSelect ? '#ffffff30' : undefined,&#13;&#10;&#9;&#9;&#9;border: appSelect ? '1px solid' : undefined,&#13;&#10;&#9;&#9;}}&#13;&#10;&#9;&gt;&#13;&#10;&#9;&#9;&lt;Image width={iconScale} height={iconScale} src={props.icon} alt=&quot;&quot; /&gt;&#13;&#10;&#9;&#9;&lt;p&#13;&#10;&#9;&#9;&#9;className=&quot;text-center break-words line-clamp-2&quot;&gt;{props.name}&lt;/p&gt;&#13;&#10;&#9;&lt;/div&gt;;&#13;&#10;});&#13;&#10;&#13;&#10;OSAppFile.displayName = 'OSAppFile';" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/lib/features/OSApp/OSAppWindow.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/lib/features/OSApp/OSAppWindow.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import { OSApp } from '@/lib/features/OSApp/OSApp';&#10;import { useEffect, useState, useRef } from 'react';&#10;import { useAppDispatch, useAppSelector } from '@/lib/hooks';&#10;import { addOpenApp, removeOpenApp } from '@/lib/features/taskbar/taskbarSlice';&#10;import {&#10;&#9;closeApp, focusApp,&#10;&#9;maximizeApp,&#10;&#9;minimizeApp,&#10;&#9;unmaximizeApp,&#10;&#9;unminimizeApp,&#10;} from '@/lib/features/windowManager/windowManagerSlice';&#10;&#10;export interface AppWindowProps {&#10;&#9;width?: number;&#10;&#9;height?: number;&#10;&#9;x?: number;&#10;&#9;y?: number;&#10;}&#10;&#10;export interface OSAppWindowProps {&#10;&#9;props?: AppWindowProps;&#10;&#9;app: OSApp;&#10;}&#10;&#10;export default function OSAppWindow({ props, app }: OSAppWindowProps) {&#10;&#9;const dispatch = useAppDispatch();&#10;&#10;&#9;const taskbarHeight = useAppSelector(state =&gt; state.settings.taskbarHeight);&#10;&#9;const maximized = useAppSelector(state =&gt; state.windowManager.openApps).find(cApp =&gt; cApp.pid === app.appFile.id)!.isMaximized;&#10;&#9;const minimized = useAppSelector(state =&gt; state.windowManager.openApps).find(cApp =&gt; cApp.pid === app.appFile.id)!.isMinimized;&#10;&#9;const zIndex = useAppSelector(state =&gt; state.windowManager.openApps).find(cApp =&gt; cApp.pid === app.appFile.id)!.zIndex;&#10;&#10;&#9;const [width, setWidth] = useState(props?.width ?? app.defaultWidth);&#10;&#9;const [height, setHeight] = useState(props?.height ?? app.defaultHeight);&#10;&#10;&#9;const [isGrabbing, setIsGrabbing] = useState(false);&#10;&#9;const [position, setPosition] = useState({&#10;&#9;&#9;x: props?.x ?? window.innerWidth / 2 - width / 2,&#10;&#9;&#9;y: props?.y ?? window.innerHeight / 2 - height / 2,&#10;&#9;});&#10;&#9;const prevMouseRef = useRef({ x: 0, y: 0 });&#10;&#10;&#9;useEffect(() =&gt; {&#10;&#9;&#9;dispatch(addOpenApp(app.appFile));&#10;&#10;&#9;&#9;return () =&gt; {&#10;&#9;&#9;&#9;dispatch(removeOpenApp(app.appFile));&#10;&#9;&#9;};&#10;&#9;}, [app.appFile, dispatch]);&#10;&#10;&#9;useEffect(() =&gt; {&#10;&#9;&#9;app.setOnGrab(e =&gt; {&#10;&#9;&#9;&#9;setIsGrabbing(true);&#10;&#9;&#9;&#9;prevMouseRef.current = { x: e.clientX, y: e.clientY };&#10;&#9;&#9;});&#10;&#9;&#9;app.setOnGrabbing(e =&gt; {&#10;&#9;&#9;&#9;const deltaX = e.clientX - prevMouseRef.current.x;&#10;&#9;&#9;&#9;const deltaY = e.clientY - prevMouseRef.current.y;&#10;&#10;&#9;&#9;&#9;setPosition(prev =&gt; ({&#10;&#9;&#9;&#9;&#9;x: prev.x + deltaX,&#10;&#9;&#9;&#9;&#9;y: prev.y + deltaY,&#10;&#9;&#9;&#9;}));&#10;&#9;&#9;&#9;prevMouseRef.current = { x: e.clientX, y: e.clientY };&#10;&#9;&#9;});&#10;&#9;&#9;app.setOnRelease(e =&gt; {&#10;&#9;&#9;&#9;setIsGrabbing(false);&#10;&#9;&#9;});&#10;&#9;&#9;app.setOnMaximize(() =&gt; {&#10;&#9;&#9;&#9;if (!maximized)&#10;&#9;&#9;&#9;&#9;dispatch(maximizeApp(app.appFile.id));&#10;&#9;&#9;&#9;else&#10;&#9;&#9;&#9;&#9;dispatch(unmaximizeApp(app.appFile.id));&#10;&#9;&#9;});&#10;&#9;&#9;app.setOnMinimize(() =&gt; {&#10;&#9;&#9;&#9;if (!minimized)&#10;&#9;&#9;&#9;&#9;dispatch(minimizeApp(app.appFile.id));&#10;&#9;&#9;&#9;else&#10;&#9;&#9;&#9;&#9;dispatch(unminimizeApp(app.appFile.id));&#10;&#9;&#9;});&#10;&#9;&#9;app.setOnClose(() =&gt; {&#10;&#9;&#9;&#9;dispatch(closeApp(app.appFile.id));&#10;&#9;&#9;});&#10;&#9;}, [app, dispatch, maximized, minimized]);&#10;&#10;&#9;return &lt;div&#10;&#9;&#9;className=&quot;absolute flex flex-col rounded-lg overflow-hidden border-[1px] transition-all duration-300&quot;&#10;&#9;&#9;onMouseDown={e =&gt; {&#10;&#9;&#9;&#9;e.stopPropagation();&#10;&#9;&#9;}}&#10;&#9;&#9;onMouseDownCapture={e =&gt; {&#10;&#9;&#9;&#9;dispatch(focusApp(app.appFile.id));&#10;&#9;&#9;}}&#10;&#9;&#9;style={{&#10;&#9;&#9;&#9;left: minimized ? window.innerWidth / 2 : maximized ? 0 : position.x,&#10;&#9;&#9;&#9;top: minimized ? window.innerHeight - taskbarHeight : maximized ? 0 : position.y,&#10;&#9;&#9;&#9;width: minimized ? 0 : maximized ? window.innerWidth : width,&#10;&#9;&#9;&#9;height: minimized ? 0 : maximized ? window.innerHeight : height,&#10;&#9;&#9;&#9;borderColor: minimized ? 'transparent' : 'black',&#10;&#9;&#9;&#9;zIndex: zIndex,&#10;&#9;&#9;&#9;transitionProperty: isGrabbing ? 'none' : 'all',&#10;&#9;&#9;}}&#10;&#9;&gt;&#10;&#9;&#9;{app.header()}&#10;&#9;&#9;{app.render()}&#10;&#9;&lt;/div&gt;;&#10;}" />
              <option name="updatedContent" value="// OSAppWindow.tsx: Renders a resizable, draggable window for a given OSApp instance, integrates with windowManager state&#13;&#10;'use client';&#13;&#10;&#13;&#10;import { OSApp } from '@/lib/features/OSApp/OSApp';&#13;&#10;import { useEffect, useState, useRef } from 'react';&#13;&#10;import { useAppDispatch, useAppSelector } from '@/lib/hooks';&#13;&#10;import { addOpenApp, removeOpenApp } from '@/lib/features/taskbar/taskbarSlice';&#13;&#10;import {&#13;&#10;&#9;closeApp, focusApp,&#13;&#10;&#9;maximizeApp,&#13;&#10;&#9;minimizeApp,&#13;&#10;&#9;unmaximizeApp,&#13;&#10;&#9;unminimizeApp,&#13;&#10;} from '@/lib/features/windowManager/windowManagerSlice';&#13;&#10;&#13;&#10;export interface AppWindowProps {&#13;&#10;&#9;width?: number;&#13;&#10;&#9;height?: number;&#13;&#10;&#9;x?: number;&#13;&#10;&#9;y?: number;&#13;&#10;}&#13;&#10;&#13;&#10;export interface OSAppWindowProps {&#13;&#10;&#9;props?: AppWindowProps;&#13;&#10;&#9;app: OSApp;&#13;&#10;}&#13;&#10;&#13;&#10;export default function OSAppWindow({ props, app }: OSAppWindowProps) {&#13;&#10;&#9;const dispatch = useAppDispatch();&#13;&#10;&#13;&#10;&#9;// Retrieve size and position settings from Redux&#13;&#10;&#9;const taskbarHeight = useAppSelector(state =&gt; state.settings.taskbarHeight);&#13;&#10;&#9;const instance = useAppSelector(state =&gt; state.windowManager.openApps)&#13;&#10;&#9;&#9;.find(cApp =&gt; cApp.pid === app.appFile.id)!;&#13;&#10;&#9;const maximized = instance.isMaximized;&#13;&#10;&#9;const minimized = instance.isMinimized;&#13;&#10;&#9;const zIndex = instance.zIndex;&#13;&#10;&#13;&#10;&#9;// Local state for window dimensions and drag position&#13;&#10;&#9;const [width, setWidth] = useState(props?.width ?? app.defaultWidth);&#13;&#10;&#9;const [height, setHeight] = useState(props?.height ?? app.defaultHeight);&#13;&#10;&#9;const [isGrabbing, setIsGrabbing] = useState(false);&#13;&#10;&#9;const [position, setPosition] = useState({&#13;&#10;&#9;&#9;x: props?.x ?? window.innerWidth / 2 - width / 2,&#13;&#10;&#9;&#9;y: props?.y ?? window.innerHeight / 2 - height / 2,&#13;&#10;&#9;});&#13;&#10;&#9;const prevMouseRef = useRef({ x: 0, y: 0 });&#13;&#10;&#13;&#10;&#9;// Register window in taskbar on mount and cleanup on unmount&#13;&#10;&#9;useEffect(() =&gt; {&#13;&#10;&#9;&#9;dispatch(addOpenApp(app.appFile));&#13;&#10;&#13;&#10;&#9;&#9;return () =&gt; {&#13;&#10;&#9;&#9;&#9;dispatch(removeOpenApp(app.appFile));&#13;&#10;&#9;&#9;};&#13;&#10;&#9;}, [app.appFile, dispatch]);&#13;&#10;&#13;&#10;&#9;// Setup drag, maximize, minimize, and close handlers on the OSApp instance&#13;&#10;&#9;useEffect(() =&gt; {&#13;&#10;&#9;&#9;// Drag start: capture initial mouse&#13;&#10;&#9;&#9;app.setOnGrab(e =&gt; {&#13;&#10;&#9;&#9;&#9;setIsGrabbing(true);&#13;&#10;&#9;&#9;&#9;prevMouseRef.current = { x: e.clientX, y: e.clientY };&#13;&#10;&#9;&#9;});&#13;&#10;&#9;&#9;// Dragging: update position incrementally&#13;&#10;&#9;&#9;app.setOnGrabbing(e =&gt; {&#13;&#10;&#9;&#9;&#9;const deltaX = e.clientX - prevMouseRef.current.x;&#13;&#10;&#9;&#9;&#9;const deltaY = e.clientY - prevMouseRef.current.y;&#13;&#10;&#13;&#10;&#9;&#9;&#9;setPosition(prev =&gt; ({ x: prev.x + deltaX, y: prev.y + deltaY }));&#13;&#10;&#9;&#9;&#9;prevMouseRef.current = { x: e.clientX, y: e.clientY };&#13;&#10;&#9;&#9;});&#13;&#10;&#9;&#9;// Drag end: stop grabbing&#13;&#10;&#9;&#9;app.setOnRelease(() =&gt; {&#13;&#10;&#9;&#9;&#9;setIsGrabbing(false);&#13;&#10;&#9;&#9;});&#13;&#10;&#9;&#9;// Maximize toggle&#13;&#10;&#9;&#9;app.setOnMaximize(() =&gt; {&#13;&#10;&#9;&#9;&#9;if (!maximized) dispatch(maximizeApp(app.appFile.id)); else dispatch(unmaximizeApp(app.appFile.id));&#13;&#10;&#9;&#9;});&#13;&#10;&#9;&#9;// Minimize toggle&#13;&#10;&#9;&#9;app.setOnMinimize(() =&gt; {&#13;&#10;&#9;&#9;&#9;if (!minimized) dispatch(minimizeApp(app.appFile.id)); else dispatch(unminimizeApp(app.appFile.id));&#13;&#10;&#9;&#9;});&#13;&#10;&#9;&#9;// Close window&#13;&#10;&#9;&#9;app.setOnClose(() =&gt; { dispatch(closeApp(app.appFile.id)); });&#13;&#10;&#9;}, [app, dispatch, maximized, minimized]);&#13;&#10;&#13;&#10;&#9;// Render window container with dynamic styles based on state&#13;&#10;&#9;return &lt;div&#13;&#10;&#9;&#9;className=&quot;absolute flex flex-col rounded-lg overflow-hidden border-[1px] transition-all duration-300&quot;&#13;&#10;&#9;&#9;onMouseDown={e =&gt; { e.stopPropagation(); }}&#13;&#10;&#9;&#9;onMouseDownCapture={e =&gt; { dispatch(focusApp(app.appFile.id)); }}&#13;&#10;&#9;&#9;style={{&#13;&#10;&#9;&#9;&#9;left: minimized ? window.innerWidth / 2 : maximized ? 0 : position.x,&#13;&#10;&#9;&#9;&#9;top: minimized ? window.innerHeight - taskbarHeight : maximized ? 0 : position.y,&#13;&#10;&#9;&#9;&#9;width: minimized ? 0 : maximized ? window.innerWidth : width,&#13;&#10;&#9;&#9;&#9;height: minimized ? 0 : maximized ? window.innerHeight : height,&#13;&#10;&#9;&#9;&#9;borderColor: minimized ? 'transparent' : 'black',&#13;&#10;&#9;&#9;&#9;zIndex: zIndex,&#13;&#10;&#9;&#9;&#9;transitionProperty: isGrabbing ? 'none' : 'all',&#13;&#10;&#9;&#9;}}&#13;&#10;&#9;&gt;&#13;&#10;&#9;&#9;{app.header()}&#13;&#10;&#9;&#9;{app.render()}&#13;&#10;&#9;&lt;/div&gt;;&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/lib/features/dekstop/Desktop.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/lib/features/dekstop/Desktop.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import { useAppSelector, useAppDispatch } from '@/lib/hooks';&#10;import { OSAppFile } from '@/lib/features/OSApp/OSAppFile';&#10;import React, { useCallback, useEffect, useRef, useState } from 'react';&#10;import Taskbar from '@/lib/features/taskbar/Taskbar';&#10;import { addApp, clearActiveApps, setActiveApps } from '@/lib/features/dekstop/desktopSlice';&#10;import OSAppWindow from '@/lib/features/OSApp/OSAppWindow';&#10;import appRegistry from '@/lib/OSApps/AppRegistry';&#10;import '@/lib/OSApps/AppList';&#10;&#10;&#10;export default function Desktop() {&#10;&#9;const TEST_APPS = false;&#10;&#10;&#9;let apps = useAppSelector(state =&gt; state.desktop.apps);&#10;&#9;if (TEST_APPS)&#10;&#9;&#9;apps = Array.from({ length: 50 }, (_, i) =&gt; ({&#10;&#9;&#9;&#9;id: i,&#10;&#9;&#9;&#9;name: 'App ' + i,&#10;&#9;&#9;&#9;icon: '/icons/bin.png',&#10;&#9;&#9;}));&#10;&#10;&#9;const openApps = useAppSelector(state =&gt; state.windowManager.openApps);&#10;&#9;const background = useAppSelector(state =&gt; state.settings.background);&#10;&#9;const taskbarHeight = useAppSelector(state =&gt; state.settings.taskbarHeight);&#10;&#9;const iconScale = useAppSelector(state =&gt; state.settings.iconScale);&#10;&#9;const [columnHeight, setColumnHeight] = useState&lt;number&gt;(-1);&#10;&#9;const [isSelecting, setIsSelecting] = useState&lt;boolean&gt;(false);&#10;&#9;const [selectionXStart, setSelectionXStart] = useState(-1);&#10;&#9;const [selectionYStart, setSelectionYStart] = useState(-1);&#10;&#9;const [selectionXEnd, setSelectionXEnd] = useState(-1);&#10;&#9;const [selectionYEnd, setSelectionYEnd] = useState(-1);&#10;&#9;const itemRefs = useRef&lt;HTMLDivElement[]&gt;([]);&#10;&#9;const dispatch = useAppDispatch();&#10;&#10;&#9;function getElementsInSelectionBox(&#10;&#9;&#9;startX: number,&#10;&#9;&#9;startY: number,&#10;&#9;&#9;endX: number,&#10;&#9;&#9;endY: number,&#10;&#9;&#9;elements: HTMLElement[],&#10;&#9;): HTMLElement[] {&#10;&#9;&#9;const left = Math.min(startX, endX);&#10;&#9;&#9;const right = Math.max(startX, endX);&#10;&#9;&#9;const top = Math.min(startY, endY);&#10;&#9;&#9;const bottom = Math.max(startY, endY);&#10;&#10;&#9;&#9;return elements.filter((el) =&gt; {&#10;&#9;&#9;&#9;const rect = el.getBoundingClientRect();&#10;&#10;&#9;&#9;&#9;return !(&#10;&#9;&#9;&#9;&#9;rect.right &lt; left ||&#10;&#9;&#9;&#9;&#9;rect.left &gt; right ||&#10;&#9;&#9;&#9;&#9;rect.bottom &lt; top ||&#10;&#9;&#9;&#9;&#9;rect.top &gt; bottom&#10;&#9;&#9;&#9;);&#10;&#9;&#9;});&#10;&#9;}&#10;&#10;&#9;const getAppsInSelectionBox = useCallback(() =&gt; {&#10;&#9;&#9;const overlapping = getElementsInSelectionBox(selectionXStart, selectionYStart, selectionXEnd, selectionYEnd, itemRefs.current);&#10;&#9;&#9;const overlappingIds = overlapping.map(el =&gt; Number(el.dataset.id));&#10;&#9;&#9;return apps.filter(app =&gt; overlappingIds.includes(app.id));&#10;&#9;}, [apps, selectionXEnd, selectionXStart, selectionYEnd, selectionYStart]);&#10;&#10;&#9;const onContextMenu = useCallback((event: React.MouseEvent&lt;HTMLDivElement&gt;) =&gt; {&#10;&#9;&#9;event.preventDefault();&#10;&#9;}, []);&#10;&#10;&#9;const onDragStart = useCallback((event: React.DragEvent&lt;HTMLDivElement&gt;) =&gt; {&#10;&#9;&#9;if (event.button === 0) {&#10;&#9;&#9;&#9;dispatch(clearActiveApps());&#10;&#9;&#9;&#9;setSelectionXStart(event.clientX);&#10;&#9;&#9;&#9;setSelectionYStart(event.clientY);&#10;&#9;&#9;&#9;setIsSelecting(true);&#10;&#9;&#9;}&#10;&#9;}, [dispatch]);&#10;&#10;&#9;const onMouseMove = useCallback((event: React.MouseEvent&lt;HTMLDivElement&gt;) =&gt; {&#10;&#9;&#9;if (isSelecting) {&#10;&#9;&#9;&#9;setSelectionXEnd(event.clientX);&#10;&#9;&#9;&#9;setSelectionYEnd(event.clientY);&#10;&#9;&#9;}&#10;&#9;}, [isSelecting]);&#10;&#10;&#9;const onDragEnd = useCallback((event: React.DragEvent&lt;HTMLDivElement&gt;) =&gt; {&#10;&#9;&#9;if (isSelecting &amp;&amp; selectionXStart !== -1 &amp;&amp; selectionXEnd !== -1 &amp;&amp; selectionYStart !== -1 &amp;&amp; selectionYEnd !== -1) {&#10;&#9;&#9;&#9;dispatch(setActiveApps(getAppsInSelectionBox()));&#10;&#9;&#9;&#9;setSelectionXStart(-1);&#10;&#9;&#9;&#9;setSelectionXEnd(-1);&#10;&#9;&#9;&#9;setSelectionYStart(-1);&#10;&#9;&#9;&#9;setSelectionYEnd(-1);&#10;&#9;&#9;}&#10;&#9;&#9;setIsSelecting(false);&#10;&#9;}, [dispatch, getAppsInSelectionBox, isSelecting, selectionXEnd, selectionXStart, selectionYEnd, selectionYStart]);&#10;&#10;&#9;const handleMouseEvent = useCallback((event: React.MouseEvent&lt;HTMLDivElement&gt;) =&gt; {&#10;&#9;&#9;event.preventDefault();&#10;&#9;&#9;switch (event.button) {&#10;&#9;&#9;&#9;// Left Click&#10;&#9;&#9;&#9;case 0:&#10;&#9;&#9;&#9;&#9;if (isSelecting)&#10;&#9;&#9;&#9;&#9;&#9;onDragEnd(event as React.DragEvent&lt;HTMLDivElement&gt;);&#10;&#9;&#9;&#9;&#9;break;&#10;&#10;&#9;&#9;&#9;// Right Click&#10;&#9;&#9;&#9;case 2:&#10;&#9;&#9;&#9;&#9;break;&#10;&#9;&#9;}&#10;&#9;}, [isSelecting, onDragEnd]);&#10;&#10;&#9;useEffect(() =&gt; {&#10;&#9;&#9;const screenHeight = window.innerHeight;&#10;&#9;&#9;const desktopHeight = screenHeight - taskbarHeight;&#10;&#9;&#9;setColumnHeight(desktopHeight / (iconScale + 50) - 1);&#10;&#9;}, [iconScale, taskbarHeight]);&#10;&#10;&#9;useEffect(() =&gt; {&#10;&#9;&#9;console.log(appRegistry);&#10;&#9;&#9;for (const app of appRegistry.apps) {&#10;&#9;&#9;&#9;console.log(app);&#10;&#9;&#9;&#9;dispatch(addApp(app.app.getProps().appFile));&#10;&#9;&#9;}&#10;&#9;}, [dispatch]);&#10;&#10;&#9;const showApp = useCallback((id: number) =&gt; {&#10;&#9;&#9;const app = appRegistry.getClass(id);&#10;&#9;&#9;if (app) {&#10;&#9;&#9;&#9;return &lt;OSAppWindow key={id + 0.1} app={app} /&gt;;&#10;&#9;&#9;}&#10;&#9;}, []);&#10;&#10;&#9;return &lt;div&#10;&#9;&#9;className=&quot;relative flex flex-col w-screen h-screen bg-cover bg-center overflow-hidden select-none&quot;&#10;&#9;&#9;style={{ backgroundImage: `url('${background}')` }}&#10;&#9;&#9;onMouseUp={handleMouseEvent}&#10;&#9;&#9;onContextMenu={onContextMenu}&#10;&#9;&#9;onMouseMove={onMouseMove}&#10;&#9;&#9;onMouseDown={onDragStart}&#10;&#9;&gt;&#10;&#9;&#9;{isSelecting &amp;&amp; selectionXStart &gt;= 0 &amp;&amp; selectionYStart &gt;= 0 &amp;&amp; selectionXEnd &gt;= 0 &amp;&amp; selectionYEnd &gt;= 0 &amp;&amp;&#10;&#9;&#9;&#9;&lt;div&#10;&#9;&#9;&#9;&#9;className=&quot;absolute bg-[#ffffff30] z-40 rounded-md border border-white&quot;&#10;&#9;&#9;&#9;&#9;style={{&#10;&#9;&#9;&#9;&#9;&#9;top: Math.min(selectionYEnd, selectionYStart),&#10;&#9;&#9;&#9;&#9;&#9;left: Math.min(selectionXEnd, selectionXStart),&#10;&#9;&#9;&#9;&#9;&#9;bottom: Math.min(window.innerHeight - selectionYEnd, window.innerHeight - selectionYStart),&#10;&#9;&#9;&#9;&#9;&#9;right: Math.min(window.innerWidth - selectionXEnd, window.innerWidth - selectionXStart),&#10;&#9;&#9;&#9;&#9;}}&#10;&#9;&#9;&#9;&gt;&#10;&#9;&#9;&#9;&lt;/div&gt;&#10;&#9;&#9;}&#10;&#9;&#9;{columnHeight !== -1 &amp;&amp;&#10;&#9;&#9;&#9;&lt;div&#10;&#9;&#9;&#9;&#9;className=&quot;gap-3 h-full px-1 grid z-10&quot;&#10;&#9;&#9;&#9;&#9;style={{&#10;&#9;&#9;&#9;&#9;&#9;paddingBottom: taskbarHeight + 30,&#10;&#9;&#9;&#9;&#9;&#9;gridAutoFlow: 'column',&#10;&#9;&#9;&#9;&#9;&#9;gridTemplateRows: `repeat(${columnHeight.toFixed()}, minmax(0, 1fr))`,&#10;&#9;&#9;&#9;&#9;&#9;width: 0,&#10;&#9;&#9;&#9;&#9;}}&#10;&#9;&#9;&#9;&gt;&#10;&#9;&#9;&#9;&#9;{apps.map((app, i) =&gt; (&#10;&#9;&#9;&#9;&#9;&#9;&lt;OSAppFile key={app.id} name={app.name} icon={app.icon} id={app.id}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9; ref={el =&gt; {&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9; if (el) itemRefs.current[i] = el;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9; }} /&gt;&#10;&#9;&#9;&#9;&#9;))}&#10;&#9;&#9;&#9;&lt;/div&gt;&#10;&#9;&#9;}&#10;&#9;&#9;&lt;Taskbar /&gt;&#10;&#9;&#9;{openApps.map(app =&gt; showApp(app.pid))}&#10;&#9;&lt;/div&gt;;&#10;}" />
              <option name="updatedContent" value="'use client';&#10;&#10;import { useAppSelector, useAppDispatch } from '@/lib/hooks';&#10;import { OSAppFile } from '@/lib/features/OSApp/OSAppFile';&#10;import React, { useCallback, useEffect, useRef, useState } from 'react';&#10;import Taskbar from '@/lib/features/taskbar/Taskbar';&#10;import { addApp, clearActiveApps, setActiveApps } from '@/lib/features/dekstop/desktopSlice';&#10;import OSAppWindow from '@/lib/features/OSApp/OSAppWindow';&#10;import appRegistry from '@/lib/OSApps/AppRegistry';&#10;import '@/lib/OSApps/AppList';&#10;&#10;&#10;export default function Desktop() {&#10;&#9;const TEST_APPS = false;&#10;&#10;&#9;let apps = useAppSelector(state =&gt; state.desktop.apps);&#10;&#9;if (TEST_APPS)&#10;&#9;&#9;apps = Array.from({ length: 50 }, (_, i) =&gt; ({&#10;&#9;&#9;&#9;id: i,&#10;&#9;&#9;&#9;name: 'App ' + i,&#10;&#9;&#9;&#9;icon: '/icons/bin.png',&#10;&#9;&#9;}));&#10;&#10;&#9;const openApps = useAppSelector(state =&gt; state.windowManager.openApps);&#10;&#9;const background = useAppSelector(state =&gt; state.settings.background);&#10;&#9;const taskbarHeight = useAppSelector(state =&gt; state.settings.taskbarHeight);&#10;&#9;const iconScale = useAppSelector(state =&gt; state.settings.iconScale);&#10;&#9;const [columnHeight, setColumnHeight] = useState&lt;number&gt;(-1);&#10;&#9;const [isSelecting, setIsSelecting] = useState&lt;boolean&gt;(false);&#10;&#9;const [selectionXStart, setSelectionXStart] = useState(-1);&#10;&#9;const [selectionYStart, setSelectionYStart] = useState(-1);&#10;&#9;const [selectionXEnd, setSelectionXEnd] = useState(-1);&#10;&#9;const [selectionYEnd, setSelectionYEnd] = useState(-1);&#10;&#9;const itemRefs = useRef&lt;HTMLDivElement[]&gt;([]);&#10;&#9;const dispatch = useAppDispatch();&#10;&#10;&#9;function getElementsInSelectionBox(&#10;&#9;&#9;startX: number,&#10;&#9;&#9;startY: number,&#10;&#9;&#9;endX: number,&#10;&#9;&#9;endY: number,&#10;&#9;&#9;elements: HTMLElement[],&#10;&#9;): HTMLElement[] {&#10;&#9;&#9;const left = Math.min(startX, endX);&#10;&#9;&#9;const right = Math.max(startX, endX);&#10;&#9;&#9;const top = Math.min(startY, endY);&#10;&#9;&#9;const bottom = Math.max(startY, endY);&#10;&#10;&#9;&#9;return elements.filter((el) =&gt; {&#10;&#9;&#9;&#9;const rect = el.getBoundingClientRect();&#10;&#10;&#9;&#9;&#9;return !(&#10;&#9;&#9;&#9;&#9;rect.right &lt; left ||&#10;&#9;&#9;&#9;&#9;rect.left &gt; right ||&#10;&#9;&#9;&#9;&#9;rect.bottom &lt; top ||&#10;&#9;&#9;&#9;&#9;rect.top &gt; bottom&#10;&#9;&#9;&#9;);&#10;&#9;&#9;});&#10;&#9;}&#10;&#10;&#9;const getAppsInSelectionBox = useCallback(() =&gt; {&#10;&#9;&#9;const overlapping = getElementsInSelectionBox(selectionXStart, selectionYStart, selectionXEnd, selectionYEnd, itemRefs.current);&#10;&#9;&#9;const overlappingIds = overlapping.map(el =&gt; Number(el.dataset.id));&#10;&#9;&#9;return apps.filter(app =&gt; overlappingIds.includes(app.id));&#10;&#9;}, [apps, selectionXEnd, selectionXStart, selectionYEnd, selectionYStart]);&#10;&#10;&#9;const onContextMenu = useCallback((event: React.MouseEvent&lt;HTMLDivElement&gt;) =&gt; {&#10;&#9;&#9;event.preventDefault();&#10;&#9;}, []);&#10;&#10;&#9;const onDragStart = useCallback((event: React.DragEvent&lt;HTMLDivElement&gt;) =&gt; {&#10;&#9;&#9;if (event.button === 0) {&#10;&#9;&#9;&#9;dispatch(clearActiveApps());&#10;&#9;&#9;&#9;setSelectionXStart(event.clientX);&#10;&#9;&#9;&#9;setSelectionYStart(event.clientY);&#10;&#9;&#9;&#9;setIsSelecting(true);&#10;&#9;&#9;}&#10;&#9;}, [dispatch]);&#10;&#10;&#9;const onMouseMove = useCallback((event: React.MouseEvent&lt;HTMLDivElement&gt;) =&gt; {&#10;&#9;&#9;if (isSelecting) {&#10;&#9;&#9;&#9;setSelectionXEnd(event.clientX);&#10;&#9;&#9;&#9;setSelectionYEnd(event.clientY);&#10;&#9;&#9;}&#10;&#9;}, [isSelecting]);&#10;&#10;&#9;const onDragEnd = useCallback((event: React.DragEvent&lt;HTMLDivElement&gt;) =&gt; {&#10;&#9;&#9;if (isSelecting &amp;&amp; selectionXStart !== -1 &amp;&amp; selectionXEnd !== -1 &amp;&amp; selectionYStart !== -1 &amp;&amp; selectionYEnd !== -1) {&#10;&#9;&#9;&#9;dispatch(setActiveApps(getAppsInSelectionBox()));&#10;&#9;&#9;&#9;setSelectionXStart(-1);&#10;&#9;&#9;&#9;setSelectionXEnd(-1);&#10;&#9;&#9;&#9;setSelectionYStart(-1);&#10;&#9;&#9;&#9;setSelectionYEnd(-1);&#10;&#9;&#9;}&#10;&#9;&#9;setIsSelecting(false);&#10;&#9;}, [dispatch, getAppsInSelectionBox, isSelecting, selectionXEnd, selectionXStart, selectionYEnd, selectionYStart]);&#10;&#10;&#9;const handleMouseEvent = useCallback((event: React.MouseEvent&lt;HTMLDivElement&gt;) =&gt; {&#10;&#9;&#9;event.preventDefault();&#10;&#9;&#9;switch (event.button) {&#10;&#9;&#9;&#9;// Left Click&#10;&#9;&#9;&#9;case 0:&#10;&#9;&#9;&#9;&#9;if (isSelecting)&#10;&#9;&#9;&#9;&#9;&#9;onDragEnd(event as React.DragEvent&lt;HTMLDivElement&gt;);&#10;&#9;&#9;&#9;&#9;break;&#10;&#10;&#9;&#9;&#9;// Right Click&#10;&#9;&#9;&#9;case 2:&#10;&#9;&#9;&#9;&#9;break;&#10;&#9;&#9;}&#10;&#9;}, [isSelecting, onDragEnd]);&#10;&#10;&#9;useEffect(() =&gt; {&#10;&#9;&#9;const screenHeight = window.innerHeight;&#10;&#9;&#9;const desktopHeight = screenHeight - taskbarHeight;&#10;&#9;&#9;setColumnHeight(desktopHeight / (iconScale + 50) - 1);&#10;&#9;}, [iconScale, taskbarHeight]);&#10;&#10;&#9;useEffect(() =&gt; {&#10;&#9;&#9;console.log(appRegistry);&#10;&#9;&#9;for (const app of appRegistry.apps) {&#10;&#9;&#9;&#9;console.log(app);&#10;&#9;&#9;&#9;dispatch(addApp(app.app.getProps().appFile));&#10;&#9;&#9;}&#10;&#9;}, [dispatch]);&#10;&#10;&#9;const showApp = useCallback((id: number) =&gt; {&#10;&#9;&#9;const app = appRegistry.getClass(id);&#10;&#9;&#9;if (app) {&#10;&#9;&#9;&#9;return &lt;OSAppWindow key={id + 0.1} app={app} /&gt;;&#10;&#9;&#9;}&#10;&#9;}, []);&#10;&#10;&#9;return &lt;div&#10;&#9;&#9;className=&quot;relative flex flex-col w-screen h-screen bg-cover bg-center overflow-hidden select-none&quot;&#10;&#9;&#9;style={{ backgroundImage: `url('${background}')` }}&#10;&#9;&#9;onMouseUp={handleMouseEvent}&#10;&#9;&#9;onContextMenu={onContextMenu}&#10;&#9;&#9;onMouseMove={onMouseMove}&#10;&#9;&#9;onMouseDown={onDragStart}&#10;&#9;&gt;&#10;&#9;&#9;{isSelecting &amp;&amp; selectionXStart &gt;= 0 &amp;&amp; selectionYStart &gt;= 0 &amp;&amp; selectionXEnd &gt;= 0 &amp;&amp; selectionYEnd &gt;= 0 &amp;&amp;&#10;&#9;&#9;&#9;&lt;div&#10;&#9;&#9;&#9;&#9;className=&quot;absolute bg-[#ffffff30] z-40 rounded-md border border-white&quot;&#10;&#9;&#9;&#9;&#9;style={{&#10;&#9;&#9;&#9;&#9;&#9;top: Math.min(selectionYEnd, selectionYStart),&#10;&#9;&#9;&#9;&#9;&#9;left: Math.min(selectionXEnd, selectionXStart),&#10;&#9;&#9;&#9;&#9;&#9;bottom: Math.min(window.innerHeight - selectionYEnd, window.innerHeight - selectionYStart),&#10;&#9;&#9;&#9;&#9;&#9;right: Math.min(window.innerWidth - selectionXEnd, window.innerWidth - selectionXStart),&#10;&#9;&#9;&#9;&#9;}}&#10;&#9;&#9;&#9;&gt;&#10;&#9;&#9;&#9;&lt;/div&gt;&#10;&#9;&#9;}&#10;&#9;&#9;{columnHeight !== -1 &amp;&amp;&#10;&#9;&#9;&#9;&lt;div&#10;&#9;&#9;&#9;&#9;className=&quot;gap-3 h-full px-1 grid z-10&quot;&#10;&#9;&#9;&#9;&#9;style={{&#10;&#9;&#9;&#9;&#9;&#9;paddingBottom: taskbarHeight + 30,&#10;&#9;&#9;&#9;&#9;&#9;gridAutoFlow: 'column',&#10;&#9;&#9;&#9;&#9;&#9;gridTemplateRows: `repeat(${columnHeight.toFixed()}, minmax(0, 1fr))`,&#10;&#9;&#9;&#9;&#9;&#9;width: 0,&#10;&#9;&#9;&#9;&#9;}}&#10;&#9;&#9;&#9;&gt;&#10;&#9;&#9;&#9;&#9;{apps.map((app, i) =&gt; (&#10;&#9;&#9;&#9;&#9;&#9;&lt;OSAppFile key={app.id} name={app.name} icon={app.icon} id={app.id}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9; ref={el =&gt; {&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9; if (el) itemRefs.current[i] = el;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9; }} /&gt;&#10;&#9;&#9;&#9;&#9;))}&#10;&#9;&#9;&#9;&lt;/div&gt;&#10;&#9;&#9;}&#10;&#9;&#9;&lt;Taskbar /&gt;&#10;&#9;&#9;{openApps.map(app =&gt; showApp(app.pid))}&#10;&#9;&lt;/div&gt;;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/lib/features/dekstop/desktopSlice.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/lib/features/dekstop/desktopSlice.ts" />
              <option name="originalContent" value="import { createSlice, PayloadAction } from '@reduxjs/toolkit';&#10;import { OSAppFileProps } from '@/lib/features/OSApp/OSAppFile';&#10;&#10;export interface desktopState {&#10;&#9;apps: OSAppFileProps[];&#10;&#9;activeApps: OSAppFileProps[];&#10;}&#10;&#10;const initialState: desktopState = {&#10;&#9;apps: [],&#10;&#9;activeApps: [],&#10;};&#10;&#10;export const desktopSlice = createSlice({&#10;&#9;name: 'desktop',&#10;&#9;initialState,&#10;&#9;reducers: {&#10;&#9;&#9;addApp: (state, action: PayloadAction&lt;OSAppFileProps&gt;) =&gt; {&#10;&#9;&#9;&#9;state.apps.push(action.payload);&#10;&#9;&#9;},&#10;&#9;&#9;removeApp: (state, action: PayloadAction&lt;OSAppFileProps&gt;) =&gt; {&#10;&#9;&#9;&#9;state.apps = state.apps.filter(app =&gt; app.id != action.payload.id);&#10;&#9;&#9;},&#10;&#9;&#9;renameApp: (state, action: PayloadAction&lt;[number, string]&gt;) =&gt; {&#10;&#9;&#9;&#9;const i = state.apps.findIndex((app) =&gt; app.id === action.payload[0]);&#10;&#9;&#9;&#9;if (i !== -1) state.apps[i].name = action.payload[1];&#10;&#9;&#9;},&#10;&#9;&#9;clearActiveApps: (state) =&gt; {&#10;&#9;&#9;&#9;state.activeApps = [];&#10;&#9;&#9;},&#10;&#9;&#9;addActiveApp: (state, action: PayloadAction&lt;OSAppFileProps&gt;) =&gt; {&#10;&#9;&#9;&#9;state.activeApps.push(action.payload);&#10;&#9;&#9;},&#10;&#9;&#9;setActiveApps: (state, action: PayloadAction&lt;OSAppFileProps[]&gt;) =&gt; {&#10;&#9;&#9;&#9;state.activeApps = action.payload;&#10;&#9;&#9;},&#10;&#9;&#9;removeActiveApp: (state, action: PayloadAction&lt;OSAppFileProps&gt;) =&gt; {&#10;&#9;&#9;&#9;state.activeApps = state.activeApps.filter(app =&gt; app.id !== action.payload.id);&#10;&#9;&#9;},&#10;&#9;},&#10;});&#10;&#10;export const {&#10;&#9;addApp,&#10;&#9;removeApp,&#10;&#9;renameApp,&#10;&#9;clearActiveApps,&#10;&#9;addActiveApp,&#10;&#9;removeActiveApp,&#10;&#9;setActiveApps,&#10;} = desktopSlice.actions;&#10;export default desktopSlice.reducer;" />
              <option name="updatedContent" value="// desktopSlice.ts: Redux slice for managing desktop icons and active selections&#13;&#10;&#13;&#10;import { createSlice, PayloadAction } from '@reduxjs/toolkit';&#13;&#10;import { OSAppFileProps } from '@/lib/features/OSApp/OSAppFile';&#13;&#10;&#13;&#10;export interface desktopState {&#13;&#10;&#9;apps: OSAppFileProps[];&#13;&#10;&#9;activeApps: OSAppFileProps[];&#13;&#10;}&#13;&#10;&#13;&#10;const initialState: desktopState = {&#13;&#10;&#9;apps: [],&#13;&#10;&#9;activeApps: [],&#13;&#10;};&#13;&#10;&#13;&#10;export const desktopSlice = createSlice({&#13;&#10;&#9;name: 'desktop',&#13;&#10;&#9;initialState,&#13;&#10;&#9;reducers: {&#13;&#10;&#9;&#9;addApp: (state, action: PayloadAction&lt;OSAppFileProps&gt;) =&gt; {&#13;&#10;&#9;&#9;&#9;state.apps.push(action.payload);&#13;&#10;&#9;&#9;},&#13;&#10;&#9;&#9;removeApp: (state, action: PayloadAction&lt;OSAppFileProps&gt;) =&gt; {&#13;&#10;&#9;&#9;&#9;state.apps = state.apps.filter(app =&gt; app.id != action.payload.id);&#13;&#10;&#9;&#9;},&#13;&#10;&#9;&#9;renameApp: (state, action: PayloadAction&lt;[number, string]&gt;) =&gt; {&#13;&#10;&#9;&#9;&#9;const i = state.apps.findIndex((app) =&gt; app.id === action.payload[0]);&#13;&#10;&#9;&#9;&#9;if (i !== -1) state.apps[i].name = action.payload[1];&#13;&#10;&#9;&#9;},&#13;&#10;&#9;&#9;clearActiveApps: (state) =&gt; {&#13;&#10;&#9;&#9;&#9;state.activeApps = [];&#13;&#10;&#9;&#9;},&#13;&#10;&#9;&#9;addActiveApp: (state, action: PayloadAction&lt;OSAppFileProps&gt;) =&gt; {&#13;&#10;&#9;&#9;&#9;state.activeApps.push(action.payload);&#13;&#10;&#9;&#9;},&#13;&#10;&#9;&#9;setActiveApps: (state, action: PayloadAction&lt;OSAppFileProps[]&gt;) =&gt; {&#13;&#10;&#9;&#9;&#9;state.activeApps = action.payload;&#13;&#10;&#9;&#9;},&#13;&#10;&#9;&#9;removeActiveApp: (state, action: PayloadAction&lt;OSAppFileProps&gt;) =&gt; {&#13;&#10;&#9;&#9;&#9;state.activeApps = state.activeApps.filter(app =&gt; app.id !== action.payload.id);&#13;&#10;&#9;&#9;},&#13;&#10;&#9;},&#13;&#10;});&#13;&#10;&#13;&#10;export const {&#13;&#10;&#9;addApp,&#13;&#10;&#9;removeApp,&#13;&#10;&#9;renameApp,&#13;&#10;&#9;clearActiveApps,&#13;&#10;&#9;addActiveApp,&#13;&#10;&#9;removeActiveApp,&#13;&#10;&#9;setActiveApps,&#13;&#10;} = desktopSlice.actions;&#13;&#10;export default desktopSlice.reducer;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/lib/features/settings/settingsSlice.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/lib/features/settings/settingsSlice.ts" />
              <option name="originalContent" value="import { createSlice, PayloadAction } from '@reduxjs/toolkit';&#10;&#10;export interface settingsState {&#10;&#9;background: string,&#10;&#9;taskbarHeight: number,&#10;&#9;iconScale: number,&#10;}&#10;&#10;const initialState: settingsState = {&#10;&#9;background: `/wallpaper.jpg`,&#10;&#9;taskbarHeight: 90,&#10;&#9;iconScale: 64,&#10;};&#10;&#10;export const settingsSlice = createSlice({&#10;&#9;name: 'settings',&#10;&#9;initialState,&#10;&#9;reducers: {&#10;&#9;&#9;setTaskbarHeight: (state, height: PayloadAction&lt;number&gt;) =&gt; {&#10;&#9;&#9;&#9;state.taskbarHeight = height.payload;&#10;&#9;&#9;},&#10;&#9;&#9;changeBackground: (state, src: PayloadAction&lt;string&gt;) =&gt; {&#10;&#9;&#9;&#9;state.background = src.payload;&#10;&#9;&#9;},&#10;&#9;&#9;setIconScale: (state, scale: PayloadAction&lt;number&gt;) =&gt; {&#10;&#9;&#9;&#9;state.iconScale = scale.payload;&#10;&#9;&#9;},&#10;&#9;},&#10;});&#10;&#10;export const { setTaskbarHeight, changeBackground, setIconScale } = settingsSlice.actions;&#10;export default settingsSlice.reducer;" />
              <option name="updatedContent" value="// settingsSlice.ts: Manages user preferences such as wallpaper, taskbar height, and icon scale&#13;&#10;&#13;&#10;import { createSlice, PayloadAction } from '@reduxjs/toolkit';&#13;&#10;&#13;&#10;export interface settingsState {&#13;&#10;&#9;background: string,&#13;&#10;&#9;taskbarHeight: number,&#13;&#10;&#9;iconScale: number,&#13;&#10;}&#13;&#10;&#13;&#10;const initialState: settingsState = {&#13;&#10;&#9;background: `/wallpaper.jpg`,&#13;&#10;&#9;taskbarHeight: 90,&#13;&#10;&#9;iconScale: 64,&#13;&#10;};&#13;&#10;&#13;&#10;export const settingsSlice = createSlice({&#13;&#10;&#9;name: 'settings',&#13;&#10;&#9;initialState,&#13;&#10;&#9;reducers: {&#13;&#10;&#9;&#9;setTaskbarHeight: (state, height: PayloadAction&lt;number&gt;) =&gt; {&#13;&#10;&#9;&#9;&#9;state.taskbarHeight = height.payload;&#13;&#10;&#9;&#9;},&#13;&#10;&#9;&#9;changeBackground: (state, src: PayloadAction&lt;string&gt;) =&gt; {&#13;&#10;&#9;&#9;&#9;state.background = src.payload;&#13;&#10;&#9;&#9;},&#13;&#10;&#9;&#9;setIconScale: (state, scale: PayloadAction&lt;number&gt;) =&gt; {&#13;&#10;&#9;&#9;&#9;state.iconScale = scale.payload;&#13;&#10;&#9;&#9;},&#13;&#10;&#9;},&#13;&#10;});&#13;&#10;&#13;&#10;export const { setTaskbarHeight, changeBackground, setIconScale } = settingsSlice.actions;&#13;&#10;export default settingsSlice.reducer;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/lib/features/taskbar/Taskbar.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/lib/features/taskbar/Taskbar.tsx" />
              <option name="originalContent" value="// Taskbar.tsx: Displays pinned and open application icons; handles launching and focus indicators&#10;'use client';&#10;&#10;import { useAppDispatch, useAppSelector } from '@/lib/hooks';&#10;import Image from 'next/image';&#10;import { closeApp, launchApp } from '@/lib/features/windowManager/windowManagerSlice';&#10;import React, { useCallback, useEffect, useRef, useState } from 'react';&#10;import { OSAppFileProps } from '@/lib/features/OSApp/OSAppFile';&#10;import { pinTaskbarApp, unpinTaskbarApp } from '@/lib/features/taskbar/taskbarSlice';&#10;&#10;export default function Taskbar() {&#10;&#9;const taskbarHeight = useAppSelector(state =&gt; state.settings.taskbarHeight);&#10;&#9;const pinnedApps = useAppSelector(state =&gt; state.taskbar.pinnedTaskbarApps);&#10;&#9;const openedApps = useAppSelector(state =&gt; state.taskbar.openedTaskbarApps).filter(app =&gt; !pinnedApps.some(cApp =&gt; cApp.id === app.id));&#10;&#9;const openedAppsInstances = useAppSelector(state =&gt; state.windowManager.openApps);&#10;&#9;const [focusedAppId, setFocusedAppId] = useState&lt;number | undefined&gt;(undefined);&#10;&#9;const [menuId, setMenuId] = useState&lt;number&gt;(-1);&#10;&#10;&#9;// Determine currently focused app from window manager instances&#10;&#9;useEffect(() =&gt; {&#10;&#9;&#9;setFocusedAppId(undefined);&#10;&#9;&#9;for (const app of openedAppsInstances) {&#10;&#9;&#9;&#9;if (app.isFocused) {&#10;&#9;&#9;&#9;&#9;setFocusedAppId(app.pid);&#10;&#9;&#9;&#9;&#9;break;&#10;&#9;&#9;&#9;}&#10;&#9;&#9;}&#10;&#9;}, [openedAppsInstances]);&#10;&#10;&#9;return &lt;div&#10;&#9;&#9;className=&quot;absolute bottom-0 w-full z-10000 px-10 pb-8 flex items-center justify-center&quot;&#10;&#9;&#9;style={{ height: taskbarHeight }}&#10;&#9;&#9;onMouseDown={e =&gt; e.stopPropagation()}&#10;&#9;&gt;&#10;&#9;&#9;&lt;div&#10;&#9;&#9;&#9;className=&quot;bg-[#ffffff90] backdrop-blur-3xl backdrop-brightness-60 w-max h-full rounded-2xl items-center justify-center flex flex-row px-1&quot;&gt;&#10;&#9;&#9;&#9;&lt;div&#10;&#9;&#9;&#9;&#9;className=&quot;flex flex-col items-center bottom-0 hover:bottom-1.5 transition-all duration-100&quot;&gt;&#10;&#9;&#9;&#9;&#9;&lt;Image&#10;&#9;&#9;&#9;&#9;&#9;draggable={false}&#10;&#9;&#9;&#9;&#9;&#9;className=&quot;cursor-pointer&quot; src=&quot;/icons/app-launcher.png&quot; alt=&quot;&quot; width={taskbarHeight - 35}&#10;&#9;&#9;&#9;&#9;&#9;height={taskbarHeight - 35}&#10;&#9;&#9;&#9;&#9;/&gt;&#10;&#9;&#9;&#9;&lt;/div&gt;&#10;&#9;&#9;&#9;{&#10;&#9;&#9;&#9;&#9;// Render pinned apps with focus highlight and click to launch or restore&#10;&#9;&#9;&#9;&#9;pinnedApps.map(app =&gt; &lt;PinnedTaskbarIcon key={app.id} app={app} focusedAppId={focusedAppId} menuId={menuId}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9; setMenuId={setMenuId} /&gt;)&#10;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;{&#10;&#9;&#9;&#9;&#9;// Render opened apps with indicator bar showing focus&#10;&#9;&#9;&#9;&#9;openedApps.map(app =&gt; &lt;TaskbarIcon key={app.id} app={app} focusedAppId={focusedAppId} menuId={menuId}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9; setMenuId={setMenuId} /&gt;)&#10;&#9;&#9;&#9;}&#10;&#9;&#9;&lt;/div&gt;&#10;&#9;&lt;/div&gt;;&#10;}&#10;&#10;const TaskbarIcon = (props: {&#10;&#9;app: OSAppFileProps,&#10;&#9;focusedAppId?: number,&#10;&#9;menuId: number,&#10;&#9;setMenuId: React.Dispatch&lt;React.SetStateAction&lt;number&gt;&gt;&#10;}) =&gt; {&#10;&#9;const dispatch = useAppDispatch();&#10;&#9;const taskbarHeight = useAppSelector(state =&gt; state.settings.taskbarHeight);&#10;&#9;const divRef = useRef&lt;HTMLDivElement&gt;(null);&#10;&#10;&#9;const onMenu = useCallback((e: React.MouseEvent&lt;HTMLDivElement&gt;) =&gt; {&#10;&#9;&#9;if (e.button === 2) {&#10;&#9;&#9;&#9;if (props.menuId !== props.app.id)&#10;&#9;&#9;&#9;&#9;props.setMenuId(props.app.id);&#10;&#9;&#9;&#9;else&#10;&#9;&#9;&#9;&#9;props.setMenuId(-1);&#10;&#9;&#9;}&#10;&#9;}, [props]);&#10;&#10;&#9;return &lt;div&gt;&#10;&#9;&#9;{&#10;&#9;&#9;&#9;props.menuId === props.app.id &amp;&amp; &lt;div&#10;&#9;&#9;&#9;&#9;className=&quot;absolute bg-[#ffffffbb] backdrop-blur-3xl backdrop-brightness-80 text-black w-[120px] rounded-lg flex flex-col items-center overflow-hidden&quot;&#10;&#9;&#9;&#9;&#9;style={{&#10;&#9;&#9;&#9;&#9;&#9;bottom: taskbarHeight + 5,&#10;&#9;&#9;&#9;&#9;&#9;left: divRef.current!.getBoundingClientRect().x - 60 + (taskbarHeight - 35) / 2,&#10;&#9;&#9;&#9;&#9;}}&#10;&#9;&#9;&#9;&gt;&#10;&#9;&#9;&#9;&#9;&lt;p className=&quot;font-bold text-sm border-b w-full text-center p-1&quot;&gt;{props.app.name}&lt;/p&gt;&#10;&#9;&#9;&#9;&#9;&lt;div&#10;&#9;&#9;&#9;&#9;&#9;onClick={() =&gt; {&#10;&#9;&#9;&#9;&#9;&#9;&#9;props.setMenuId(-1);&#10;&#9;&#9;&#9;&#9;&#9;&#9;dispatch(pinTaskbarApp(props.app));&#10;&#9;&#9;&#9;&#9;&#9;}}&#10;&#9;&#9;&#9;&#9;&#9;className=&quot;w-full h-7 flex justify-center items-center hover:bg-[#FFFFFF50]&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;p className=&quot;text-sm&quot;&gt;Pin App&lt;/p&gt;&#10;&#9;&#9;&#9;&#9;&lt;/div&gt;&#10;&#9;&#9;&#9;&#9;&lt;div&#10;&#9;&#9;&#9;&#9;&#9;onClick={() =&gt; {&#10;&#9;&#9;&#9;&#9;&#9;&#9;props.setMenuId(-1);&#10;&#9;&#9;&#9;&#9;&#9;&#9;dispatch(closeApp(props.app.id));&#10;&#9;&#9;&#9;&#9;&#9;}}&#10;&#9;&#9;&#9;&#9;&#9;className=&quot;w-full h-7 flex justify-center items-center hover:bg-[#FFFFFF50]&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;p className=&quot;text-sm&quot;&gt;Close App&lt;/p&gt;&#10;&#9;&#9;&#9;&#9;&lt;/div&gt;&#10;&#9;&#9;&#9;&lt;/div&gt;&#10;&#9;&#9;}&#10;&#9;&#9;&lt;div&#10;&#9;&#9;&#9;className=&quot;relative flex flex-col items-center bottom-0 hover:bottom-1.5 transition-all duration-100&quot;&#10;&#9;&#9;&#9;ref={divRef}&#10;&#9;&#9;&#9;onContextMenu={onMenu}&#10;&#9;&#9;&gt;&#10;&#9;&#9;&#9;&lt;Image&#10;&#9;&#9;&#9;&#9;draggable={false}&#10;&#9;&#9;&#9;&#9;className=&quot;cursor-pointer&quot;&#10;&#9;&#9;&#9;&#9;src={props.app.icon}&#10;&#9;&#9;&#9;&#9;alt=&quot;&quot;&#10;&#9;&#9;&#9;&#9;width={taskbarHeight - 35}&#10;&#9;&#9;&#9;&#9;height={taskbarHeight - 35}&#10;&#9;&#9;&#9;&#9;onClick={() =&gt; {&#10;&#9;&#9;&#9;&#9;&#9;dispatch(launchApp(props.app.id));&#10;&#9;&#9;&#9;&#9;}}&#10;&#9;&#9;&#9;/&gt;&#10;&#9;&#9;&#9;&lt;div&#10;&#9;&#9;&#9;&#9;className=&quot;absolute w-2/5 h-1 top-[1px] rounded-full transition-colors duration-400&quot;&#10;&#9;&#9;&#9;&#9;style={{ backgroundColor: props.focusedAppId === props.app.id ? '#000000A0' : '#FFFFFFA0' }}&gt;&#10;&#9;&#9;&#9;&lt;/div&gt;&#10;&#9;&#9;&lt;/div&gt;&#10;&#9;&lt;/div&gt;;&#10;};&#10;&#10;const PinnedTaskbarIcon = (props: {&#10;&#9;app: OSAppFileProps,&#10;&#9;focusedAppId?: number,&#10;&#9;menuId: number,&#10;&#9;setMenuId: React.Dispatch&lt;React.SetStateAction&lt;number&gt;&gt;&#10;}) =&gt; {&#10;&#9;const dispatch = useAppDispatch();&#10;&#9;const taskbarHeight = useAppSelector(state =&gt; state.settings.taskbarHeight);&#10;&#9;const divRef = useRef&lt;HTMLDivElement&gt;(null);&#10;&#9;const openApps = useAppSelector(state =&gt; state.windowManager.openApps);&#10;&#10;&#9;const onMenu = useCallback((e: React.MouseEvent&lt;HTMLDivElement&gt;) =&gt; {&#10;&#9;&#9;if (e.button === 2) {&#10;&#9;&#9;&#9;if (props.menuId !== props.app.id)&#10;&#9;&#9;&#9;&#9;props.setMenuId(props.app.id);&#10;&#9;&#9;&#9;else&#10;&#9;&#9;&#9;&#9;props.setMenuId(-1);&#10;&#9;&#9;}&#10;&#9;}, [props]);&#10;&#10;&#9;return &lt;div&gt;&#10;&#9;&#9;{&#10;&#9;&#9;&#9;props.menuId === props.app.id &amp;&amp; &lt;div&#10;&#9;&#9;&#9;&#9;className=&quot;absolute bg-[#ffffff60] text-black w-[120px] rounded-lg flex flex-col items-center overflow-hidden&quot;&#10;&#9;&#9;&#9;&#9;style={{&#10;&#9;&#9;&#9;&#9;&#9;bottom: taskbarHeight + 5,&#10;&#9;&#9;&#9;&#9;&#9;left: divRef.current!.getBoundingClientRect().x - 60 + (taskbarHeight - 35) / 2,&#10;&#9;&#9;&#9;&#9;}}&#10;&#9;&#9;&#9;&gt;&#10;&#9;&#9;&#9;&#9;&lt;p className=&quot;font-bold text-sm border-b w-full text-center p-1&quot;&gt;{props.app.name}&lt;/p&gt;&#10;&#9;&#9;&#9;&#9;&lt;div&#10;&#9;&#9;&#9;&#9;&#9;onClick={() =&gt; {&#10;&#9;&#9;&#9;&#9;&#9;&#9;props.setMenuId(-1);&#10;&#9;&#9;&#9;&#9;&#9;&#9;dispatch(unpinTaskbarApp(props.app));&#10;&#9;&#9;&#9;&#9;&#9;}}&#10;&#9;&#9;&#9;&#9;&#9;className=&quot;w-full h-7 flex justify-center items-center hover:bg-[#FFFFFF50]&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;p className=&quot;text-sm&quot;&gt;Unpin App&lt;/p&gt;&#10;&#9;&#9;&#9;&#9;&lt;/div&gt;&#10;&#9;&#9;&#9;&#9;{openApps.some(cApp =&gt; cApp.pid === props.app.id) &amp;&amp;&#10;&#9;&#9;&#9;&#9;&#9;&lt;div&#10;&#9;&#9;&#9;&#9;&#9;&#9;onClick={() =&gt; {&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;props.setMenuId(-1);&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;dispatch(closeApp(props.app.id));&#10;&#9;&#9;&#9;&#9;&#9;&#9;}}&#10;&#9;&#9;&#9;&#9;&#9;&#9;className=&quot;w-full h-7 flex justify-center items-center hover:bg-[#FFFFFF50]&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;p className=&quot;text-sm&quot;&gt;Close App&lt;/p&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;/div&gt;&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&lt;/div&gt;&#10;&#9;&#9;}&#10;&#9;&#9;&lt;div&#10;&#9;&#9;&#9;className=&quot;relative flex flex-col items-center bottom-0 hover:bottom-1.5 transition-all duration-100&quot;&#10;&#9;&#9;&#9;ref={divRef}&#10;&#9;&#9;&#9;onContextMenu={onMenu}&#10;&#9;&#9;&gt;&#10;&#9;&#9;&#9;&lt;Image&#10;&#9;&#9;&#9;&#9;draggable={false}&#10;&#9;&#9;&#9;&#9;className=&quot;cursor-pointer&quot;&#10;&#9;&#9;&#9;&#9;src={props.app.icon}&#10;&#9;&#9;&#9;&#9;alt=&quot;&quot;&#10;&#9;&#9;&#9;&#9;width={taskbarHeight - 35}&#10;&#9;&#9;&#9;&#9;height={taskbarHeight - 35}&#10;&#9;&#9;&#9;&#9;onClick={() =&gt; {&#10;&#9;&#9;&#9;&#9;&#9;dispatch(launchApp(props.app.id));&#10;&#9;&#9;&#9;&#9;}}&#10;&#9;&#9;&#9;/&gt;&#10;&#9;&#9;&#9;{openApps.some(cApp =&gt; cApp.pid === props.app.id) &amp;&amp;&#10;&#9;&#9;&#9;&#9;&lt;div&#10;&#9;&#9;&#9;&#9;&#9;className=&quot;absolute w-2/5 h-1 top-[1px] rounded-full transition-colors duration-400&quot;&#10;&#9;&#9;&#9;&#9;&#9;style={{ backgroundColor: props.focusedAppId === props.app.id ? '#000000A0' : '#FFFFFFA0' }}&gt;&#10;&#9;&#9;&#9;&#9;&lt;/div&gt;&#10;&#9;&#9;&#9;}&#10;&#9;&#9;&lt;/div&gt;&#10;&#9;&lt;/div&gt;;&#10;};" />
              <option name="updatedContent" value="// Taskbar.tsx: Displays pinned and open application icons; handles launching and focus indicators&#10;'use client';&#10;&#10;import { useAppDispatch, useAppSelector } from '@/lib/hooks';&#10;import Image from 'next/image';&#10;import { closeApp, launchApp } from '@/lib/features/windowManager/windowManagerSlice';&#10;import React, { useCallback, useEffect, useRef, useState } from 'react';&#10;import { OSAppFileProps } from '@/lib/features/OSApp/OSAppFile';&#10;import { pinTaskbarApp, unpinTaskbarApp } from '@/lib/features/taskbar/taskbarSlice';&#10;&#10;export default function Taskbar() {&#10;&#9;const taskbarHeight = useAppSelector(state =&gt; state.settings.taskbarHeight);&#10;&#9;const pinnedApps = useAppSelector(state =&gt; state.taskbar.pinnedTaskbarApps);&#10;&#9;const openedApps = useAppSelector(state =&gt; state.taskbar.openedTaskbarApps).filter(app =&gt; !pinnedApps.some(cApp =&gt; cApp.id === app.id));&#10;&#9;const openedAppsInstances = useAppSelector(state =&gt; state.windowManager.openApps);&#10;&#9;const [focusedAppId, setFocusedAppId] = useState&lt;number | undefined&gt;(undefined);&#10;&#9;const [menuId, setMenuId] = useState&lt;number&gt;(-1);&#10;&#10;&#9;// Determine currently focused app from window manager instances&#10;&#9;useEffect(() =&gt; {&#10;&#9;&#9;setFocusedAppId(undefined);&#10;&#9;&#9;for (const app of openedAppsInstances) {&#10;&#9;&#9;&#9;if (app.isFocused) {&#10;&#9;&#9;&#9;&#9;setFocusedAppId(app.pid);&#10;&#9;&#9;&#9;&#9;break;&#10;&#9;&#9;&#9;}&#10;&#9;&#9;}&#10;&#9;}, [openedAppsInstances]);&#10;&#10;&#9;return &lt;div&#10;&#9;&#9;className=&quot;absolute bottom-0 w-full z-10000 px-10 pb-8 flex items-center justify-center&quot;&#10;&#9;&#9;style={{ height: taskbarHeight }}&#10;&#9;&#9;onMouseDown={e =&gt; e.stopPropagation()}&#10;&#9;&gt;&#10;&#9;&#9;&lt;div&#10;&#9;&#9;&#9;className=&quot;bg-[#ffffff90] backdrop-blur-3xl backdrop-brightness-60 w-max h-full rounded-2xl items-center justify-center flex flex-row px-1&quot;&gt;&#10;&#9;&#9;&#9;&lt;div&#10;&#9;&#9;&#9;&#9;className=&quot;flex flex-col items-center bottom-0 hover:bottom-1.5 transition-all duration-100&quot;&gt;&#10;&#9;&#9;&#9;&#9;&lt;Image&#10;&#9;&#9;&#9;&#9;&#9;draggable={false}&#10;&#9;&#9;&#9;&#9;&#9;className=&quot;cursor-pointer&quot; src=&quot;/icons/app-launcher.png&quot; alt=&quot;&quot; width={taskbarHeight - 35}&#10;&#9;&#9;&#9;&#9;&#9;height={taskbarHeight - 35}&#10;&#9;&#9;&#9;&#9;/&gt;&#10;&#9;&#9;&#9;&lt;/div&gt;&#10;&#9;&#9;&#9;{&#10;&#9;&#9;&#9;&#9;// Render pinned apps with focus highlight and click to launch or restore&#10;&#9;&#9;&#9;&#9;pinnedApps.map(app =&gt; &lt;PinnedTaskbarIcon key={app.id} app={app} focusedAppId={focusedAppId} menuId={menuId}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9; setMenuId={setMenuId} /&gt;)&#10;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;{&#10;&#9;&#9;&#9;&#9;// Render opened apps with indicator bar showing focus&#10;&#9;&#9;&#9;&#9;openedApps.map(app =&gt; &lt;TaskbarIcon key={app.id} app={app} focusedAppId={focusedAppId} menuId={menuId}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9; setMenuId={setMenuId} /&gt;)&#10;&#9;&#9;&#9;}&#10;&#9;&#9;&lt;/div&gt;&#10;&#9;&lt;/div&gt;;&#10;}&#10;&#10;const TaskbarIcon = (props: {&#10;&#9;app: OSAppFileProps,&#10;&#9;focusedAppId?: number,&#10;&#9;menuId: number,&#10;&#9;setMenuId: React.Dispatch&lt;React.SetStateAction&lt;number&gt;&gt;&#10;}) =&gt; {&#10;&#9;const dispatch = useAppDispatch();&#10;&#9;const taskbarHeight = useAppSelector(state =&gt; state.settings.taskbarHeight);&#10;&#9;const divRef = useRef&lt;HTMLDivElement&gt;(null);&#10;&#10;&#9;const onMenu = useCallback((e: React.MouseEvent&lt;HTMLDivElement&gt;) =&gt; {&#10;&#9;&#9;if (e.button === 2) {&#10;&#9;&#9;&#9;if (props.menuId !== props.app.id)&#10;&#9;&#9;&#9;&#9;props.setMenuId(props.app.id);&#10;&#9;&#9;&#9;else&#10;&#9;&#9;&#9;&#9;props.setMenuId(-1);&#10;&#9;&#9;}&#10;&#9;}, [props]);&#10;&#10;&#9;return &lt;div&gt;&#10;&#9;&#9;{&#10;&#9;&#9;&#9;props.menuId === props.app.id &amp;&amp; &lt;div&#10;&#9;&#9;&#9;&#9;className=&quot;absolute bg-[#ffffffbb] backdrop-blur-3xl backdrop-brightness-80 text-black w-[120px] rounded-lg flex flex-col items-center overflow-hidden&quot;&#10;&#9;&#9;&#9;&#9;style={{&#10;&#9;&#9;&#9;&#9;&#9;bottom: taskbarHeight + 5,&#10;&#9;&#9;&#9;&#9;&#9;left: divRef.current!.getBoundingClientRect().x - 60 + (taskbarHeight - 35) / 2,&#10;&#9;&#9;&#9;&#9;}}&#10;&#9;&#9;&#9;&gt;&#10;&#9;&#9;&#9;&#9;&lt;p className=&quot;font-bold text-sm border-b w-full text-center p-1&quot;&gt;{props.app.name}&lt;/p&gt;&#10;&#9;&#9;&#9;&#9;&lt;div&#10;&#9;&#9;&#9;&#9;&#9;onClick={() =&gt; {&#10;&#9;&#9;&#9;&#9;&#9;&#9;props.setMenuId(-1);&#10;&#9;&#9;&#9;&#9;&#9;&#9;dispatch(pinTaskbarApp(props.app));&#10;&#9;&#9;&#9;&#9;&#9;}}&#10;&#9;&#9;&#9;&#9;&#9;className=&quot;w-full h-7 flex justify-center items-center hover:bg-[#FFFFFF50]&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;p className=&quot;text-sm&quot;&gt;Pin App&lt;/p&gt;&#10;&#9;&#9;&#9;&#9;&lt;/div&gt;&#10;&#9;&#9;&#9;&#9;&lt;div&#10;&#9;&#9;&#9;&#9;&#9;onClick={() =&gt; {&#10;&#9;&#9;&#9;&#9;&#9;&#9;props.setMenuId(-1);&#10;&#9;&#9;&#9;&#9;&#9;&#9;dispatch(closeApp(props.app.id));&#10;&#9;&#9;&#9;&#9;&#9;}}&#10;&#9;&#9;&#9;&#9;&#9;className=&quot;w-full h-7 flex justify-center items-center hover:bg-[#FFFFFF50]&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;p className=&quot;text-sm&quot;&gt;Close App&lt;/p&gt;&#10;&#9;&#9;&#9;&#9;&lt;/div&gt;&#10;&#9;&#9;&#9;&lt;/div&gt;&#10;&#9;&#9;}&#10;&#9;&#9;&lt;div&#10;&#9;&#9;&#9;className=&quot;relative flex flex-col items-center bottom-0 hover:bottom-1.5 transition-all duration-100&quot;&#10;&#9;&#9;&#9;ref={divRef}&#10;&#9;&#9;&#9;onContextMenu={onMenu}&#10;&#9;&#9;&gt;&#10;&#9;&#9;&#9;&lt;Image&#10;&#9;&#9;&#9;&#9;draggable={false}&#10;&#9;&#9;&#9;&#9;className=&quot;cursor-pointer&quot;&#10;&#9;&#9;&#9;&#9;src={props.app.icon}&#10;&#9;&#9;&#9;&#9;alt=&quot;&quot;&#10;&#9;&#9;&#9;&#9;width={taskbarHeight - 35}&#10;&#9;&#9;&#9;&#9;height={taskbarHeight - 35}&#10;&#9;&#9;&#9;&#9;onClick={() =&gt; {&#10;&#9;&#9;&#9;&#9;&#9;dispatch(launchApp(props.app.id));&#10;&#9;&#9;&#9;&#9;}}&#10;&#9;&#9;&#9;/&gt;&#10;&#9;&#9;&#9;&lt;div&#10;&#9;&#9;&#9;&#9;className=&quot;absolute w-2/5 h-1 top-[1px] rounded-full transition-colors duration-400&quot;&#10;&#9;&#9;&#9;&#9;style={{ backgroundColor: props.focusedAppId === props.app.id ? '#000000A0' : '#FFFFFFA0' }}&gt;&#10;&#9;&#9;&#9;&lt;/div&gt;&#10;&#9;&#9;&lt;/div&gt;&#10;&#9;&lt;/div&gt;;&#10;};&#10;&#10;const PinnedTaskbarIcon = (props: {&#10;&#9;app: OSAppFileProps,&#10;&#9;focusedAppId?: number,&#10;&#9;menuId: number,&#10;&#9;setMenuId: React.Dispatch&lt;React.SetStateAction&lt;number&gt;&gt;&#10;}) =&gt; {&#10;&#9;const dispatch = useAppDispatch();&#10;&#9;const taskbarHeight = useAppSelector(state =&gt; state.settings.taskbarHeight);&#10;&#9;const divRef = useRef&lt;HTMLDivElement&gt;(null);&#10;&#9;const openApps = useAppSelector(state =&gt; state.windowManager.openApps);&#10;&#10;&#9;const onMenu = useCallback((e: React.MouseEvent&lt;HTMLDivElement&gt;) =&gt; {&#10;&#9;&#9;if (e.button === 2) {&#10;&#9;&#9;&#9;if (props.menuId !== props.app.id)&#10;&#9;&#9;&#9;&#9;props.setMenuId(props.app.id);&#10;&#9;&#9;&#9;else&#10;&#9;&#9;&#9;&#9;props.setMenuId(-1);&#10;&#9;&#9;}&#10;&#9;}, [props]);&#10;&#10;&#9;return &lt;div&gt;&#10;&#9;&#9;{&#10;&#9;&#9;&#9;props.menuId === props.app.id &amp;&amp; &lt;div&#10;&#9;&#9;&#9;&#9;className=&quot;absolute bg-[#ffffff60] text-black w-[120px] rounded-lg flex flex-col items-center overflow-hidden&quot;&#10;&#9;&#9;&#9;&#9;style={{&#10;&#9;&#9;&#9;&#9;&#9;bottom: taskbarHeight + 5,&#10;&#9;&#9;&#9;&#9;&#9;left: divRef.current!.getBoundingClientRect().x - 60 + (taskbarHeight - 35) / 2,&#10;&#9;&#9;&#9;&#9;}}&#10;&#9;&#9;&#9;&gt;&#10;&#9;&#9;&#9;&#9;&lt;p className=&quot;font-bold text-sm border-b w-full text-center p-1&quot;&gt;{props.app.name}&lt;/p&gt;&#10;&#9;&#9;&#9;&#9;&lt;div&#10;&#9;&#9;&#9;&#9;&#9;onClick={() =&gt; {&#10;&#9;&#9;&#9;&#9;&#9;&#9;props.setMenuId(-1);&#10;&#9;&#9;&#9;&#9;&#9;&#9;dispatch(unpinTaskbarApp(props.app));&#10;&#9;&#9;&#9;&#9;&#9;}}&#10;&#9;&#9;&#9;&#9;&#9;className=&quot;w-full h-7 flex justify-center items-center hover:bg-[#FFFFFF50]&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;p className=&quot;text-sm&quot;&gt;Unpin App&lt;/p&gt;&#10;&#9;&#9;&#9;&#9;&lt;/div&gt;&#10;&#9;&#9;&#9;&#9;{openApps.some(cApp =&gt; cApp.pid === props.app.id) &amp;&amp;&#10;&#9;&#9;&#9;&#9;&#9;&lt;div&#10;&#9;&#9;&#9;&#9;&#9;&#9;onClick={() =&gt; {&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;props.setMenuId(-1);&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;dispatch(closeApp(props.app.id));&#10;&#9;&#9;&#9;&#9;&#9;&#9;}}&#10;&#9;&#9;&#9;&#9;&#9;&#9;className=&quot;w-full h-7 flex justify-center items-center hover:bg-[#FFFFFF50]&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;p className=&quot;text-sm&quot;&gt;Close App&lt;/p&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;/div&gt;&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&lt;/div&gt;&#10;&#9;&#9;}&#10;&#9;&#9;&lt;div&#10;&#9;&#9;&#9;className=&quot;relative flex flex-col items-center bottom-0 hover:bottom-1.5 transition-all duration-100&quot;&#10;&#9;&#9;&#9;ref={divRef}&#10;&#9;&#9;&#9;onContextMenu={onMenu}&#10;&#9;&#9;&gt;&#10;&#9;&#9;&#9;&lt;Image&#10;&#9;&#9;&#9;&#9;draggable={false}&#10;&#9;&#9;&#9;&#9;className=&quot;cursor-pointer&quot;&#10;&#9;&#9;&#9;&#9;src={props.app.icon}&#10;&#9;&#9;&#9;&#9;alt=&quot;&quot;&#10;&#9;&#9;&#9;&#9;width={taskbarHeight - 35}&#10;&#9;&#9;&#9;&#9;height={taskbarHeight - 35}&#10;&#9;&#9;&#9;&#9;onClick={() =&gt; {&#10;&#9;&#9;&#9;&#9;&#9;dispatch(launchApp(props.app.id));&#10;&#9;&#9;&#9;&#9;}}&#10;&#9;&#9;&#9;/&gt;&#10;&#9;&#9;&#9;{openApps.some(cApp =&gt; cApp.pid === props.app.id) &amp;&amp;&#10;&#9;&#9;&#9;&#9;&lt;div&#10;&#9;&#9;&#9;&#9;&#9;className=&quot;absolute w-2/5 h-1 top-[1px] rounded-full transition-colors duration-400&quot;&#10;&#9;&#9;&#9;&#9;&#9;style={{ backgroundColor: props.focusedAppId === props.app.id ? '#000000A0' : '#FFFFFFA0' }}&gt;&#10;&#9;&#9;&#9;&#9;&lt;/div&gt;&#10;&#9;&#9;&#9;}&#10;&#9;&#9;&lt;/div&gt;&#10;&#9;&lt;/div&gt;;&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/lib/features/taskbar/taskbarSlice.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/lib/features/taskbar/taskbarSlice.ts" />
              <option name="originalContent" value="'use client';&#10;&#10;import { createSlice, PayloadAction } from '@reduxjs/toolkit';&#10;import { OSAppFileProps } from '@/lib/features/OSApp/OSAppFile';&#10;&#10;export interface taskbarState {&#10;&#9;pinnedApps: OSAppFileProps[],&#10;&#9;openedApps: OSAppFileProps[],&#10;}&#10;&#10;const initialState: taskbarState = {&#10;&#9;pinnedApps: [],&#10;&#9;openedApps: [],&#10;};&#10;&#10;const taskbarSlice = createSlice({&#10;&#9;name: 'taskbar',&#10;&#9;initialState,&#10;&#9;reducers: {&#10;&#9;&#9;pinApp: (state, app: PayloadAction&lt;OSAppFileProps&gt;) =&gt; {&#10;&#9;&#9;&#9;state.pinnedApps.push(app.payload);&#10;&#9;&#9;},&#10;&#9;&#9;unpinApp: (state, app: PayloadAction&lt;OSAppFileProps&gt;) =&gt; {&#10;&#9;&#9;&#9;state.pinnedApps = state.pinnedApps.filter(cApp =&gt; cApp.id !== app.payload.id);&#10;&#9;&#9;},&#10;&#9;&#9;addOpenApp: (state, app: PayloadAction&lt;OSAppFileProps&gt;) =&gt; {&#10;&#9;&#9;&#9;state.openedApps.push(app.payload);&#10;&#9;&#9;},&#10;&#9;&#9;removeOpenApp: (state, app: PayloadAction&lt;OSAppFileProps&gt;) =&gt; {&#10;&#9;&#9;&#9;state.openedApps = state.openedApps.filter(cApp =&gt; cApp.id !== app.payload.id);&#10;&#9;&#9;},&#10;&#9;},&#10;});&#10;&#10;export const { pinApp, unpinApp, addOpenApp, removeOpenApp } = taskbarSlice.actions;&#10;export default taskbarSlice.reducer;" />
              <option name="updatedContent" value="// taskbarSlice.ts: Manages pinned and opened apps in the taskbar for quick launch and status tracking&#13;&#10;&#13;&#10;'use client';&#13;&#10;&#13;&#10;import { createSlice, PayloadAction } from '@reduxjs/toolkit';&#13;&#10;import { OSAppFileProps } from '@/lib/features/OSApp/OSAppFile';&#13;&#10;&#13;&#10;export interface taskbarState {&#13;&#10;&#9;pinnedApps: OSAppFileProps[],&#13;&#10;&#9;openedApps: OSAppFileProps[],&#13;&#10;}&#13;&#10;&#13;&#10;const initialState: taskbarState = {&#13;&#10;&#9;pinnedApps: [],&#13;&#10;&#9;openedApps: [],&#13;&#10;};&#13;&#10;&#13;&#10;const taskbarSlice = createSlice({&#13;&#10;&#9;name: 'taskbar',&#13;&#10;&#9;initialState,&#13;&#10;&#9;reducers: {&#13;&#10;&#9;&#9;pinApp: (state, app: PayloadAction&lt;OSAppFileProps&gt;) =&gt; {&#13;&#10;&#9;&#9;&#9;state.pinnedApps.push(app.payload);&#13;&#10;&#9;&#9;},&#13;&#10;&#9;&#9;unpinApp: (state, app: PayloadAction&lt;OSAppFileProps&gt;) =&gt; {&#13;&#10;&#9;&#9;&#9;state.pinnedApps = state.pinnedApps.filter(cApp =&gt; cApp.id !== app.payload.id);&#13;&#10;&#9;&#9;},&#13;&#10;&#9;&#9;addOpenApp: (state, app: PayloadAction&lt;OSAppFileProps&gt;) =&gt; {&#13;&#10;&#9;&#9;&#9;state.openedApps.push(app.payload);&#13;&#10;&#9;&#9;},&#13;&#10;&#9;&#9;removeOpenApp: (state, app: PayloadAction&lt;OSAppFileProps&gt;) =&gt; {&#13;&#10;&#9;&#9;&#9;state.openedApps = state.openedApps.filter(cApp =&gt; cApp.id !== app.payload.id);&#13;&#10;&#9;&#9;},&#13;&#10;&#9;},&#13;&#10;});&#13;&#10;&#13;&#10;export const { pinApp, unpinApp, addOpenApp, removeOpenApp } = taskbarSlice.actions;&#13;&#10;export default taskbarSlice.reducer;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/lib/features/windowManager/windowManagerSlice.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/lib/features/windowManager/windowManagerSlice.ts" />
              <option name="originalContent" value="import { createSlice, PayloadAction } from '@reduxjs/toolkit';&#10;&#10;export interface appInstance {&#10;&#9;pid: number,&#10;&#9;isMinimized: boolean,&#10;&#9;isMaximized: boolean,&#10;&#9;isFocused: boolean,&#10;&#9;zIndex: number,&#10;}&#10;&#10;export interface windowManagerState {&#10;&#9;openApps: appInstance[];&#10;&#9;focusZIndex: number;&#10;}&#10;&#10;const initialState: windowManagerState = {&#10;&#9;openApps: [],&#10;&#9;focusZIndex: 1000,&#10;};&#10;&#10;export const windowManagerSlice = createSlice({&#10;&#9;name: 'windowManager',&#10;&#9;initialState,&#10;&#9;reducers: {&#10;&#9;&#9;launchApp: (state, action: PayloadAction&lt;number&gt;) =&gt; {&#10;&#9;&#9;&#9;state.focusZIndex++;&#10;&#9;&#9;&#9;const app = state.openApps.find(app =&gt; app.pid === action.payload);&#10;&#9;&#9;&#9;state.openApps.map(app =&gt; app.isFocused = false);&#10;&#9;&#9;&#9;if (app) {&#10;&#9;&#9;&#9;&#9;app.isMinimized = false;&#10;&#9;&#9;&#9;&#9;app.isFocused = true;&#10;&#9;&#9;&#9;&#9;app.zIndex = state.focusZIndex;&#10;&#9;&#9;&#9;} else state.openApps.push({&#10;&#9;&#9;&#9;&#9;pid: action.payload,&#10;&#9;&#9;&#9;&#9;isMinimized: false,&#10;&#9;&#9;&#9;&#9;isMaximized: false,&#10;&#9;&#9;&#9;&#9;isFocused: true,&#10;&#9;&#9;&#9;&#9;zIndex: state.focusZIndex,&#10;&#9;&#9;&#9;});&#10;&#9;&#9;},&#10;&#9;&#9;closeApp: (state, action: PayloadAction&lt;number&gt;) =&gt; {&#10;&#9;&#9;&#9;state.openApps = state.openApps.filter(instance =&gt; instance.pid !== action.payload);&#10;&#9;&#9;&#9;if (state.openApps.length === 0) {&#10;&#9;&#9;&#9;&#9;state.focusZIndex = 1000;&#10;&#9;&#9;&#9;} else if (state.openApps.length === 1) {&#10;&#9;&#9;&#9;&#9;state.focusZIndex = 1000;&#10;&#9;&#9;&#9;&#9;state.openApps[0].zIndex = state.focusZIndex++;&#10;&#9;&#9;&#9;}&#10;&#9;&#9;},&#10;&#9;&#9;minimizeApp: (state, action: PayloadAction&lt;number&gt;) =&gt; {&#10;&#9;&#9;&#9;const app = state.openApps.find(app =&gt; app.pid === action.payload);&#10;&#9;&#9;&#9;if (app) {&#10;&#9;&#9;&#9;&#9;app.isMinimized = true;&#10;&#9;&#9;&#9;&#9;app.isFocused = false;&#10;&#9;&#9;&#9;}&#10;&#9;&#9;},&#10;&#9;&#9;unminimizeApp: (state, action: PayloadAction&lt;number&gt;) =&gt; {&#10;&#9;&#9;&#9;state.focusZIndex++;&#10;&#9;&#9;&#9;const app = state.openApps.find(app =&gt; app.pid === action.payload);&#10;&#9;&#9;&#9;state.openApps.map(app =&gt; app.isFocused = false);&#10;&#9;&#9;&#9;if (app) {&#10;&#9;&#9;&#9;&#9;app.isMinimized = false;&#10;&#9;&#9;&#9;&#9;app.isFocused = true;&#10;&#9;&#9;&#9;&#9;app.zIndex = state.focusZIndex;&#10;&#9;&#9;&#9;}&#10;&#9;&#9;},&#10;&#9;&#9;maximizeApp: (state, action: PayloadAction&lt;number&gt;) =&gt; {&#10;&#9;&#9;&#9;const app = state.openApps.find(app =&gt; app.pid === action.payload);&#10;&#9;&#9;&#9;if (app)&#10;&#9;&#9;&#9;&#9;app.isMaximized = true;&#10;&#9;&#9;},&#10;&#9;&#9;unmaximizeApp: (state, action: PayloadAction&lt;number&gt;) =&gt; {&#10;&#9;&#9;&#9;const app = state.openApps.find(app =&gt; app.pid === action.payload);&#10;&#9;&#9;&#9;if (app)&#10;&#9;&#9;&#9;&#9;app.isMaximized = false;&#10;&#9;&#9;},&#10;&#9;&#9;focusApp: (state, action: PayloadAction&lt;number&gt;) =&gt; {&#10;&#9;&#9;&#9;state.focusZIndex++;&#10;&#9;&#9;&#9;state.openApps.map(app =&gt; app.isFocused = false);&#10;&#9;&#9;&#9;const app = state.openApps.find(app =&gt; app.pid === action.payload);&#10;&#9;&#9;&#9;if (app) {&#10;&#9;&#9;&#9;&#9;app.isFocused = true;&#10;&#9;&#9;&#9;&#9;app.zIndex = state.focusZIndex;&#10;&#9;&#9;&#9;}&#10;&#9;&#9;},&#10;&#9;&#9;unfocusApp: (state, action: PayloadAction&lt;number&gt;) =&gt; {&#10;&#9;&#9;&#9;const app = state.openApps.find(app =&gt; app.pid === action.payload);&#10;&#9;&#9;&#9;if (app)&#10;&#9;&#9;&#9;&#9;app.isFocused = false;&#10;&#9;&#9;},&#10;&#9;},&#10;});&#10;&#10;export const {&#10;&#9;launchApp,&#10;&#9;closeApp,&#10;&#9;minimizeApp,&#10;&#9;unminimizeApp,&#10;&#9;maximizeApp,&#10;&#9;unmaximizeApp,&#10;&#9;focusApp,&#10;&#9;unfocusApp,&#10;} = windowManagerSlice.actions;&#10;export default windowManagerSlice.reducer;" />
              <option name="updatedContent" value="// windowManagerSlice.ts: Manages state of open application windows (minimize, maximize, focus, and z-index)&#13;&#10;import { createSlice, PayloadAction } from '@reduxjs/toolkit';&#13;&#10;&#13;&#10;export interface appInstance {&#13;&#10;&#9;pid: number,&#13;&#10;&#9;isMinimized: boolean,&#13;&#10;&#9;isMaximized: boolean,&#13;&#10;&#9;isFocused: boolean,&#13;&#10;&#9;zIndex: number,&#13;&#10;}&#13;&#10;&#13;&#10;export interface windowManagerState {&#13;&#10;&#9;openApps: appInstance[];  // Active window instances&#13;&#10;&#9;focusZIndex: number;      // Current highest z-index for focus stacking&#13;&#10;}&#13;&#10;&#13;&#10;const initialState: windowManagerState = {&#13;&#10;&#9;openApps: [],&#13;&#10;&#9;focusZIndex: 1000,&#13;&#10;};&#13;&#10;&#13;&#10;export const windowManagerSlice = createSlice({&#13;&#10;&#9;name: 'windowManager',&#13;&#10;&#9;initialState,&#13;&#10;&#9;reducers: {&#13;&#10;&#9;&#9;// Launch or focus an app window; increments z-index and handles restore&#13;&#10;&#9;&#9;launchApp: (state, action: PayloadAction&lt;number&gt;) =&gt; {&#13;&#10;&#9;&#9;&#9;state.focusZIndex++;&#13;&#10;&#9;&#9;&#9;const app = state.openApps.find(app =&gt; app.pid === action.payload);&#13;&#10;&#9;&#9;&#9;state.openApps.map(app =&gt; app.isFocused = false);&#13;&#10;&#9;&#9;&#9;if (app) {&#13;&#10;&#9;&#9;&#9;&#9;app.isMinimized = false;&#13;&#10;&#9;&#9;&#9;&#9;app.isFocused = true;&#13;&#10;&#9;&#9;&#9;&#9;app.zIndex = state.focusZIndex;&#13;&#10;&#9;&#9;&#9;} else state.openApps.push({&#13;&#10;&#9;&#9;&#9;&#9;pid: action.payload,&#13;&#10;&#9;&#9;&#9;&#9;isMinimized: false,&#13;&#10;&#9;&#9;&#9;&#9;isMaximized: false,&#13;&#10;&#9;&#9;&#9;&#9;isFocused: true,&#13;&#10;&#9;&#9;&#9;&#9;zIndex: state.focusZIndex,&#13;&#10;&#9;&#9;&#9;});&#13;&#10;&#9;&#9;},&#13;&#10;&#9;&#9;// Close window and adjust z-index for remaining windows&#13;&#10;&#9;&#9;closeApp: (state, action: PayloadAction&lt;number&gt;) =&gt; {&#13;&#10;&#9;&#9;&#9;state.openApps = state.openApps.filter(instance =&gt; instance.pid !== action.payload);&#13;&#10;&#9;&#9;&#9;if (state.openApps.length === 0) {&#13;&#10;&#9;&#9;&#9;&#9;state.focusZIndex = 1000;&#13;&#10;&#9;&#9;&#9;} else if (state.openApps.length === 1) {&#13;&#10;&#9;&#9;&#9;&#9;state.focusZIndex = 1000;&#13;&#10;&#9;&#9;&#9;&#9;state.openApps[0].zIndex = state.focusZIndex++;&#13;&#10;&#9;&#9;&#9;}&#13;&#10;&#9;&#9;},&#13;&#10;&#9;&#9;// Minimize the specified app window&#13;&#10;&#9;&#9;minimizeApp: (state, action: PayloadAction&lt;number&gt;) =&gt; {&#13;&#10;&#9;&#9;&#9;const app = state.openApps.find(app =&gt; app.pid === action.payload);&#13;&#10;&#9;&#9;&#9;if (app) {&#13;&#10;&#9;&#9;&#9;&#9;app.isMinimized = true;&#13;&#10;&#9;&#9;&#9;&#9;app.isFocused = false;&#13;&#10;&#9;&#9;&#9;}&#13;&#10;&#9;&#9;},&#13;&#10;&#9;&#9;// Restore a minimized window and bring to focus&#13;&#10;&#9;&#9;unminimizeApp: (state, action: PayloadAction&lt;number&gt;) =&gt; {&#13;&#10;&#9;&#9;&#9;state.focusZIndex++;&#13;&#10;&#9;&#9;&#9;const app = state.openApps.find(app =&gt; app.pid === action.payload);&#13;&#10;&#9;&#9;&#9;state.openApps.map(app =&gt; app.isFocused = false);&#13;&#10;&#9;&#9;&#9;if (app) {&#13;&#10;&#9;&#9;&#9;&#9;app.isMinimized = false;&#13;&#10;&#9;&#9;&#9;&#9;app.isFocused = true;&#13;&#10;&#9;&#9;&#9;&#9;app.zIndex = state.focusZIndex;&#13;&#10;&#9;&#9;&#9;}&#13;&#10;&#9;&#9;},&#13;&#10;&#9;&#9;// Maximize the specified window&#13;&#10;&#9;&#9;maximizeApp: (state, action: PayloadAction&lt;number&gt;) =&gt; {&#13;&#10;&#9;&#9;&#9;const app = state.openApps.find(app =&gt; app.pid === action.payload);&#13;&#10;&#9;&#9;&#9;if (app)&#13;&#10;&#9;&#9;&#9;&#9;app.isMaximized = true;&#13;&#10;&#9;&#9;},&#13;&#10;&#9;&#9;// Restore window from maximized state&#13;&#10;&#9;&#9;unmaximizeApp: (state, action: PayloadAction&lt;number&gt;) =&gt; {&#13;&#10;&#9;&#9;&#9;const app = state.openApps.find(app =&gt; app.pid === action.payload);&#13;&#10;&#9;&#9;&#9;if (app)&#13;&#10;&#9;&#9;&#9;&#9;app.isMaximized = false;&#13;&#10;&#9;&#9;},&#13;&#10;&#9;&#9;// Bring an existing window to front (update focus and z-index)&#13;&#10;&#9;&#9;focusApp: (state, action: PayloadAction&lt;number&gt;) =&gt; {&#13;&#10;&#9;&#9;&#9;state.focusZIndex++;&#13;&#10;&#9;&#9;&#9;state.openApps.map(app =&gt; app.isFocused = false);&#13;&#10;&#9;&#9;&#9;const app = state.openApps.find(app =&gt; app.pid === action.payload);&#13;&#10;&#9;&#9;&#9;if (app) {&#13;&#10;&#9;&#9;&#9;&#9;app.isFocused = true;&#13;&#10;&#9;&#9;&#9;&#9;app.zIndex = state.focusZIndex;&#13;&#10;&#9;&#9;&#9;}&#13;&#10;&#9;&#9;},&#13;&#10;&#9;&#9;// Remove focus from the specified window without altering z-index&#13;&#10;&#9;&#9;unfocusApp: (state, action: PayloadAction&lt;number&gt;) =&gt; {&#13;&#10;&#9;&#9;&#9;const app = state.openApps.find(app =&gt; app.pid === action.payload);&#13;&#10;&#9;&#9;&#9;if (app)&#13;&#10;&#9;&#9;&#9;&#9;app.isFocused = false;&#13;&#10;&#9;&#9;},&#13;&#10;&#9;},&#13;&#10;});&#13;&#10;&#13;&#10;export const {&#13;&#10;&#9;launchApp,&#13;&#10;&#9;closeApp,&#13;&#10;&#9;minimizeApp,&#13;&#10;&#9;unminimizeApp,&#13;&#10;&#9;maximizeApp,&#13;&#10;&#9;unmaximizeApp,&#13;&#10;&#9;focusApp,&#13;&#10;&#9;unfocusApp,&#13;&#10;} = windowManagerSlice.actions;&#13;&#10;export default windowManagerSlice.reducer;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/lib/hooks.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/lib/hooks.ts" />
              <option name="originalContent" value="import { useDispatch, useSelector, useStore } from 'react-redux';&#10;import type { AppDispatch, AppStore, RootState } from '@/lib/store';&#10;&#10;export const useAppDispatch = useDispatch.withTypes&lt;AppDispatch&gt;();&#10;export const useAppSelector = useSelector.withTypes&lt;RootState&gt;();&#10;export const useAppStore = useStore.withTypes&lt;AppStore&gt;();" />
              <option name="updatedContent" value="// hooks.ts: Typed React-Redux hooks for dispatch and selector to enforce AppDispatch and RootState types&#13;&#10;import { useDispatch, useSelector, useStore } from 'react-redux';&#13;&#10;import type { AppDispatch, AppStore, RootState } from '@/lib/store';&#13;&#10;&#13;&#10;export const useAppDispatch = useDispatch.withTypes&lt;AppDispatch&gt;();&#13;&#10;export const useAppSelector = useSelector.withTypes&lt;RootState&gt;();&#13;&#10;export const useAppStore = useStore.withTypes&lt;AppStore&gt;();" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/lib/store.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/lib/store.ts" />
              <option name="originalContent" value="import { configureStore } from '@reduxjs/toolkit';&#10;import desktopReducer from '@/lib/features/dekstop/desktopSlice';&#10;import settingsReducer from '@/lib/features/settings/settingsSlice';&#10;import taskbarReducer from '@/lib/features/taskbar/taskbarSlice';&#10;import windowManagerReducer from '@/lib/features/windowManager/windowManagerSlice';&#10;&#10;export const makeStore = () =&gt; {&#10;&#9;return configureStore({&#10;&#9;&#9;reducer: {&#10;&#9;&#9;&#9;desktop: desktopReducer,&#10;&#9;&#9;&#9;settings: settingsReducer,&#10;&#9;&#9;&#9;taskbar: taskbarReducer,&#10;&#9;&#9;&#9;windowManager: windowManagerReducer,&#10;&#9;&#9;},&#10;&#9;});&#10;};&#10;&#10;export type AppStore = ReturnType&lt;typeof makeStore&gt;;&#10;export type RootState = ReturnType&lt;AppStore['getState']&gt;;&#10;export type AppDispatch = AppStore['dispatch'];" />
              <option name="updatedContent" value="import { configureStore } from '@reduxjs/toolkit';&#10;import desktopReducer from '@/lib/features/dekstop/desktopSlice';&#10;import settingsReducer from '@/lib/features/settings/settingsSlice';&#10;import taskbarReducer from '@/lib/features/taskbar/taskbarSlice';&#10;import windowManagerReducer from '@/lib/features/windowManager/windowManagerSlice';&#10;&#10;export const makeStore = () =&gt; {&#10;&#9;return configureStore({&#10;&#9;&#9;reducer: {&#10;&#9;&#9;&#9;desktop: desktopReducer,&#10;&#9;&#9;&#9;settings: settingsReducer,&#10;&#9;&#9;&#9;taskbar: taskbarReducer,&#10;&#9;&#9;&#9;windowManager: windowManagerReducer,&#10;&#9;&#9;},&#10;&#9;});&#10;};&#10;&#10;export type AppStore = ReturnType&lt;typeof makeStore&gt;;&#10;export type RootState = ReturnType&lt;AppStore['getState']&gt;;&#10;export type AppDispatch = AppStore['dispatch'];" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>